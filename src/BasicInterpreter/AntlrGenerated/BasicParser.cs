//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Basic.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JesseFreeman.BasicInterpreter.AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class BasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOLLAR=1, PERCENT=2, RETURN=3, PRINT=4, GOTO=5, GOSUB=6, IF=7, NEXT=8, 
		THEN=9, REM=10, CHR=11, MID=12, LEFT=13, RIGHT=14, STR=15, LPAREN=16, 
		RPAREN=17, PLUS=18, MINUS=19, TIMES=20, DIV=21, CLEAR=22, GTE=23, LTE=24, 
		GT=25, LT=26, COMMA=27, LIST=28, RUN=29, END=30, LET=31, EQ=32, FOR=33, 
		TO=34, STEP=35, INPUT=36, SEMICOLON=37, DIM=38, SQR=39, COLON=40, TEXT=41, 
		HGR=42, HGR2=43, LEN=44, CALL=45, ASC=46, HPLOT=47, VPLOT=48, PRNUMBER=49, 
		INNUMBER=50, VTAB=51, HTAB=52, HOME=53, ON=54, PDL=55, PLOT=56, PEEK=57, 
		POKE=58, INTF=59, STOP=60, HIMEM=61, LOMEM=62, FLASH=63, INVERSE=64, NORMAL=65, 
		ONERR=66, SPC=67, FRE=68, POS=69, USR=70, TRACE=71, NOTRACE=72, AND=73, 
		OR=74, DATA=75, WAIT=76, READ=77, XDRAW=78, DRAW=79, AT=80, DEF=81, FN=82, 
		VAL=83, TAB=84, SPEED=85, ROT=86, SCALE=87, COLOR=88, HCOLOR=89, HLIN=90, 
		VLIN=91, SCRN=92, POP=93, SHLOAD=94, SIN=95, COS=96, TAN=97, ATN=98, RND=99, 
		SGN=100, EXP=101, LOG=102, ABS=103, STORE=104, RECALL=105, GET=106, EXPONENT=107, 
		AMPERSAND=108, GR=109, NOT=110, RESTORE=111, SAVE=112, LOAD=113, INCLUDE=114, 
		CLS=115, COMMENT=116, STRINGLITERAL=117, LETTERS=118, NUMBER=119, FLOAT=120, 
		WS=121, NEWLINE=122;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_lineWithoutNumber = 2, RULE_amperoper = 3, 
		RULE_linenumber = 4, RULE_amprstmt = 5, RULE_statement = 6, RULE_vardecl = 7, 
		RULE_printstmt1 = 8, RULE_getstmt = 9, RULE_letstmt = 10, RULE_variableassignment = 11, 
		RULE_stringVarDecl = 12, RULE_relop = 13, RULE_neq = 14, RULE_ifstmt = 15, 
		RULE_forstmt1 = 16, RULE_forstmt2 = 17, RULE_nextstmt = 18, RULE_inputstmt = 19, 
		RULE_readstmt = 20, RULE_dimstmt = 21, RULE_gotostmt = 22, RULE_gosubstmt = 23, 
		RULE_pokestmt = 24, RULE_callstmt = 25, RULE_hplotstmt = 26, RULE_vplotstmt = 27, 
		RULE_plotstmt = 28, RULE_ongotostmt = 29, RULE_ongosubstmt = 30, RULE_vtabstmnt = 31, 
		RULE_htabstmnt = 32, RULE_himemstmt = 33, RULE_lomemstmt = 34, RULE_datastmt = 35, 
		RULE_datum = 36, RULE_waitstmt = 37, RULE_xdrawstmt = 38, RULE_drawstmt = 39, 
		RULE_defstmt = 40, RULE_tabstmt = 41, RULE_speedstmt = 42, RULE_rotstmt = 43, 
		RULE_scalestmt = 44, RULE_colorstmt = 45, RULE_hcolorstmt = 46, RULE_hlinstmt = 47, 
		RULE_vlinstmt = 48, RULE_onerrstmt = 49, RULE_prstmt = 50, RULE_instmt = 51, 
		RULE_storestmt = 52, RULE_recallstmt = 53, RULE_liststmt = 54, RULE_popstmt = 55, 
		RULE_amptstmt = 56, RULE_includestmt = 57, RULE_endstmt = 58, RULE_returnstmt = 59, 
		RULE_restorestmt = 60, RULE_number = 61, RULE_func_ = 62, RULE_signExpression = 63, 
		RULE_exponentExpression = 64, RULE_multiplyingExpression = 65, RULE_addingExpression = 66, 
		RULE_relationalExpression = 67, RULE_expression = 68, RULE_var_ = 69, 
		RULE_varname = 70, RULE_varsuffix = 71, RULE_varlist = 72, RULE_exprlist = 73, 
		RULE_sqrfunc = 74, RULE_chrfunc = 75, RULE_lenfunc = 76, RULE_ascfunc = 77, 
		RULE_midfunc = 78, RULE_pdlfunc = 79, RULE_peekfunc = 80, RULE_intfunc = 81, 
		RULE_spcfunc = 82, RULE_frefunc = 83, RULE_posfunc = 84, RULE_usrfunc = 85, 
		RULE_leftfunc = 86, RULE_rightfunc = 87, RULE_strfunc = 88, RULE_fnfunc = 89, 
		RULE_valfunc = 90, RULE_scrnfunc = 91, RULE_sinfunc = 92, RULE_cosfunc = 93, 
		RULE_tanfunc = 94, RULE_atnfunc = 95, RULE_rndfunc = 96, RULE_sgnfunc = 97, 
		RULE_expfunc = 98, RULE_logfunc = 99, RULE_absfunc = 100, RULE_tabfunc = 101;
	public static readonly string[] ruleNames = {
		"prog", "line", "lineWithoutNumber", "amperoper", "linenumber", "amprstmt", 
		"statement", "vardecl", "printstmt1", "getstmt", "letstmt", "variableassignment", 
		"stringVarDecl", "relop", "neq", "ifstmt", "forstmt1", "forstmt2", "nextstmt", 
		"inputstmt", "readstmt", "dimstmt", "gotostmt", "gosubstmt", "pokestmt", 
		"callstmt", "hplotstmt", "vplotstmt", "plotstmt", "ongotostmt", "ongosubstmt", 
		"vtabstmnt", "htabstmnt", "himemstmt", "lomemstmt", "datastmt", "datum", 
		"waitstmt", "xdrawstmt", "drawstmt", "defstmt", "tabstmt", "speedstmt", 
		"rotstmt", "scalestmt", "colorstmt", "hcolorstmt", "hlinstmt", "vlinstmt", 
		"onerrstmt", "prstmt", "instmt", "storestmt", "recallstmt", "liststmt", 
		"popstmt", "amptstmt", "includestmt", "endstmt", "returnstmt", "restorestmt", 
		"number", "func_", "signExpression", "exponentExpression", "multiplyingExpression", 
		"addingExpression", "relationalExpression", "expression", "var_", "varname", 
		"varsuffix", "varlist", "exprlist", "sqrfunc", "chrfunc", "lenfunc", "ascfunc", 
		"midfunc", "pdlfunc", "peekfunc", "intfunc", "spcfunc", "frefunc", "posfunc", 
		"usrfunc", "leftfunc", "rightfunc", "strfunc", "fnfunc", "valfunc", "scrnfunc", 
		"sinfunc", "cosfunc", "tanfunc", "atnfunc", "rndfunc", "sgnfunc", "expfunc", 
		"logfunc", "absfunc", "tabfunc"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'%'", "'RETURN'", "'PRINT'", "'GOTO'", "'GOSUB'", "'IF'", 
		"'NEXT'", "'THEN'", "'REM'", "'CHR$'", "'MID$'", "'LEFT$'", "'RIGHT$'", 
		"'STR$'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'CLEAR'", "'>: '", 
		"'<: '", "'>'", "'<'", "','", "'LIST'", "'RUN'", "'END'", "'LET'", "'='", 
		"'FOR'", "'TO'", "'STEP'", "'INPUT'", "';'", "'DIM'", "'SQR'", "':'", 
		"'TEXT'", "'HGR'", "'HGR2'", "'LEN'", "'CALL'", "'ASC'", "'HPLOT'", "'VPLOT'", 
		"'PR#'", "'IN#'", "'VTAB'", "'HTAB'", "'HOME'", "'ON'", "'PDL'", "'PLOT'", 
		"'PEEK'", "'POKE'", "'INT'", "'STOP'", "'HIMEM'", "'LOMEM'", "'FLASH'", 
		"'INVERSE'", "'NORMAL'", "'ONERR'", "'SPC'", "'FRE'", "'POS'", "'USR'", 
		"'TRACE'", "'NOTRACE'", "'AND'", "'OR'", "'DATA'", "'WAIT'", "'READ'", 
		"'XDRAW'", "'DRAW'", "'AT'", "'DEF'", "'FN'", "'VAL'", "'TAB'", "'SPEED'", 
		"'ROT'", "'SCALE'", "'COLOR'", "'HCOLOR'", "'HLIN'", "'VLIN'", "'SCRN'", 
		"'POP'", "'SHLOAD'", "'SIN'", "'COS'", "'TAN'", "'ATN'", "'RND'", "'SGN'", 
		"'EXP'", "'LOG'", "'ABS'", "'STORE'", "'RECALL'", "'GET'", "'^'", "'&'", 
		"'GR'", "'NOT'", "'RESTORE'", "'SAVE'", "'LOAD'", "'INCLUDE'", "'CLS'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOLLAR", "PERCENT", "RETURN", "PRINT", "GOTO", "GOSUB", "IF", "NEXT", 
		"THEN", "REM", "CHR", "MID", "LEFT", "RIGHT", "STR", "LPAREN", "RPAREN", 
		"PLUS", "MINUS", "TIMES", "DIV", "CLEAR", "GTE", "LTE", "GT", "LT", "COMMA", 
		"LIST", "RUN", "END", "LET", "EQ", "FOR", "TO", "STEP", "INPUT", "SEMICOLON", 
		"DIM", "SQR", "COLON", "TEXT", "HGR", "HGR2", "LEN", "CALL", "ASC", "HPLOT", 
		"VPLOT", "PRNUMBER", "INNUMBER", "VTAB", "HTAB", "HOME", "ON", "PDL", 
		"PLOT", "PEEK", "POKE", "INTF", "STOP", "HIMEM", "LOMEM", "FLASH", "INVERSE", 
		"NORMAL", "ONERR", "SPC", "FRE", "POS", "USR", "TRACE", "NOTRACE", "AND", 
		"OR", "DATA", "WAIT", "READ", "XDRAW", "DRAW", "AT", "DEF", "FN", "VAL", 
		"TAB", "SPEED", "ROT", "SCALE", "COLOR", "HCOLOR", "HLIN", "VLIN", "SCRN", 
		"POP", "SHLOAD", "SIN", "COS", "TAN", "ATN", "RND", "SGN", "EXP", "LOG", 
		"ABS", "STORE", "RECALL", "GET", "EXPONENT", "AMPERSAND", "GR", "NOT", 
		"RESTORE", "SAVE", "LOAD", "INCLUDE", "CLS", "COMMENT", "STRINGLITERAL", 
		"LETTERS", "NUMBER", "FLOAT", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineWithoutNumberContext lineWithoutNumber() {
			return GetRuleContext<LineWithoutNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 204;
					lineWithoutNumber();
					}
					break;
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 13L) != 0)) {
					{
					{
					State = 207;
					line();
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 213;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext[] amprstmt() {
			return GetRuleContexts<AmprstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext amprstmt(int i) {
			return GetRuleContext<AmprstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(BasicParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(BasicParser.REM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(BasicParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(BasicParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BasicParser.COLON, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			linenumber();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 218;
				Match(NEWLINE);
				}
			}

			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 221;
				amprstmt();
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COLON) {
					{
					{
					State = 222;
					Match(COLON);
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -756694541133675016L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 26941335293589895L) != 0)) {
						{
						State = 223;
						amprstmt();
						}
					}

					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 231;
				Match(COMMENT);
				}
				break;
			case 3:
				{
				State = 232;
				Match(REM);
				}
				break;
			}
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 235;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineWithoutNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext[] amprstmt() {
			return GetRuleContexts<AmprstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext amprstmt(int i) {
			return GetRuleContext<AmprstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(BasicParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(BasicParser.REM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(BasicParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(BasicParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BasicParser.COLON, i);
		}
		public LineWithoutNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineWithoutNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLineWithoutNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLineWithoutNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWithoutNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineWithoutNumberContext lineWithoutNumber() {
		LineWithoutNumberContext _localctx = new LineWithoutNumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineWithoutNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 238;
				Match(NEWLINE);
				}
			}

			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 241;
				amprstmt();
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COLON) {
					{
					{
					State = 242;
					Match(COLON);
					State = 244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -756694541133675016L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 26941335293589895L) != 0)) {
						{
						State = 243;
						amprstmt();
						}
					}

					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 251;
				Match(COMMENT);
				}
				break;
			case 3:
				{
				State = 252;
				Match(REM);
				}
				break;
			}
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 255;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmperoperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(BasicParser.AMPERSAND, 0); }
		public AmperoperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amperoper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAmperoper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAmperoper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmperoper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmperoperContext amperoper() {
		AmperoperContext _localctx = new AmperoperContext(Context, State);
		EnterRule(_localctx, 6, RULE_amperoper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(AMPERSAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(BasicParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(BasicParser.NEWLINE, 0); }
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinenumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 8, RULE_linenumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS || _la==NEWLINE) {
				{
				State = 260;
				_la = TokenStream.LA(1);
				if ( !(_la==WS || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 263;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmprstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmperoperContext amperoper() {
			return GetRuleContext<AmperoperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(BasicParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(BasicParser.REM, 0); }
		public AmprstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amprstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAmprstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAmprstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmprstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmprstmtContext amprstmt() {
		AmprstmtContext _localctx = new AmprstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_amprstmt);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
			case PRINT:
			case GOTO:
			case GOSUB:
			case IF:
			case NEXT:
			case CLEAR:
			case LIST:
			case RUN:
			case END:
			case LET:
			case FOR:
			case INPUT:
			case DIM:
			case TEXT:
			case HGR:
			case HGR2:
			case CALL:
			case HPLOT:
			case VPLOT:
			case PRNUMBER:
			case INNUMBER:
			case VTAB:
			case HTAB:
			case HOME:
			case ON:
			case PLOT:
			case POKE:
			case STOP:
			case HIMEM:
			case LOMEM:
			case FLASH:
			case INVERSE:
			case NORMAL:
			case ONERR:
			case TRACE:
			case NOTRACE:
			case DATA:
			case WAIT:
			case READ:
			case XDRAW:
			case DRAW:
			case DEF:
			case TAB:
			case SPEED:
			case ROT:
			case SCALE:
			case COLOR:
			case HCOLOR:
			case HLIN:
			case VLIN:
			case POP:
			case SHLOAD:
			case STORE:
			case RECALL:
			case GET:
			case AMPERSAND:
			case GR:
			case RESTORE:
			case SAVE:
			case LOAD:
			case INCLUDE:
			case CLS:
			case LETTERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 265;
					amperoper();
					}
					break;
				}
				State = 268;
				statement();
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 269;
					Match(COMMA);
					State = 270;
					statement();
					}
					}
					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				Match(COMMENT);
				}
				break;
			case REM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				Match(REM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLS() { return GetToken(BasicParser.CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(BasicParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(BasicParser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(BasicParser.TRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTRACE() { return GetToken(BasicParser.NOTRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLASH() { return GetToken(BasicParser.FLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVERSE() { return GetToken(BasicParser.INVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GR() { return GetToken(BasicParser.GR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMAL() { return GetToken(BasicParser.NORMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHLOAD() { return GetToken(BasicParser.SHLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEAR() { return GetToken(BasicParser.CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUN() { return GetToken(BasicParser.RUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(BasicParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(BasicParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOME() { return GetToken(BasicParser.HOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HGR() { return GetToken(BasicParser.HGR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HGR2() { return GetToken(BasicParser.HGR2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndstmtContext endstmt() {
			return GetRuleContext<EndstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestorestmtContext restorestmt() {
			return GetRuleContext<RestorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmptstmtContext amptstmt() {
			return GetRuleContext<AmptstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PopstmtContext popstmt() {
			return GetRuleContext<PopstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListstmtContext liststmt() {
			return GetRuleContext<ListstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorestmtContext storestmt() {
			return GetRuleContext<StorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetstmtContext getstmt() {
			return GetRuleContext<GetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecallstmtContext recallstmt() {
			return GetRuleContext<RecallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextstmtContext nextstmt() {
			return GetRuleContext<NextstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstmtContext instmt() {
			return GetRuleContext<InstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrstmtContext prstmt() {
			return GetRuleContext<PrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnerrstmtContext onerrstmt() {
			return GetRuleContext<OnerrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HlinstmtContext hlinstmt() {
			return GetRuleContext<HlinstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VlinstmtContext vlinstmt() {
			return GetRuleContext<VlinstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorstmtContext colorstmt() {
			return GetRuleContext<ColorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeedstmtContext speedstmt() {
			return GetRuleContext<SpeedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalestmtContext scalestmt() {
			return GetRuleContext<ScalestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RotstmtContext rotstmt() {
			return GetRuleContext<RotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HcolorstmtContext hcolorstmt() {
			return GetRuleContext<HcolorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HimemstmtContext himemstmt() {
			return GetRuleContext<HimemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LomemstmtContext lomemstmt() {
			return GetRuleContext<LomemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Printstmt1Context printstmt1() {
			return GetRuleContext<Printstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PokestmtContext pokestmt() {
			return GetRuleContext<PokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlotstmtContext plotstmt() {
			return GetRuleContext<PlotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngotostmtContext ongotostmt() {
			return GetRuleContext<OngotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngosubstmtContext ongosubstmt() {
			return GetRuleContext<OngosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forstmt1Context forstmt1() {
			return GetRuleContext<Forstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forstmt2Context forstmt2() {
			return GetRuleContext<Forstmt2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputstmtContext inputstmt() {
			return GetRuleContext<InputstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabstmtContext tabstmt() {
			return GetRuleContext<TabstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimstmtContext dimstmt() {
			return GetRuleContext<DimstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadstmtContext readstmt() {
			return GetRuleContext<ReadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HplotstmtContext hplotstmt() {
			return GetRuleContext<HplotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VplotstmtContext vplotstmt() {
			return GetRuleContext<VplotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VtabstmntContext vtabstmnt() {
			return GetRuleContext<VtabstmntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtabstmntContext htabstmnt() {
			return GetRuleContext<HtabstmntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitstmtContext waitstmt() {
			return GetRuleContext<WaitstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatastmtContext datastmt() {
			return GetRuleContext<DatastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XdrawstmtContext xdrawstmt() {
			return GetRuleContext<XdrawstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawstmtContext drawstmt() {
			return GetRuleContext<DrawstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefstmtContext defstmt() {
			return GetRuleContext<DefstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludestmtContext includestmt() {
			return GetRuleContext<IncludestmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				Match(CLS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				Match(LOAD);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282;
				Match(SAVE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283;
				Match(TRACE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 284;
				Match(NOTRACE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 285;
				Match(FLASH);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 286;
				Match(INVERSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 287;
				Match(GR);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 288;
				Match(NORMAL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 289;
				Match(SHLOAD);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 290;
				Match(CLEAR);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 291;
				Match(RUN);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 292;
				Match(STOP);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 293;
				Match(TEXT);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 294;
				Match(HOME);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 295;
				Match(HGR);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 296;
				Match(HGR2);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 297;
				endstmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 298;
				returnstmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 299;
				restorestmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 300;
				amptstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 301;
				popstmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 302;
				liststmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 303;
				storestmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 304;
				getstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 305;
				recallstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 306;
				nextstmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 307;
				instmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 308;
				prstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 309;
				onerrstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 310;
				hlinstmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 311;
				vlinstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 312;
				colorstmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 313;
				speedstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 314;
				scalestmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 315;
				rotstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 316;
				hcolorstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 317;
				himemstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 318;
				lomemstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 319;
				printstmt1();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 320;
				pokestmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 321;
				plotstmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 322;
				ongotostmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 323;
				ongosubstmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 324;
				ifstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 325;
				forstmt1();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 326;
				forstmt2();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 327;
				inputstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 328;
				tabstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 329;
				dimstmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 330;
				gotostmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 331;
				gosubstmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 332;
				callstmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 333;
				readstmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 334;
				hplotstmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 335;
				vplotstmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 336;
				vtabstmnt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 337;
				htabstmnt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 338;
				waitstmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 339;
				datastmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 340;
				xdrawstmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 341;
				drawstmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 342;
				defstmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 343;
				letstmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 344;
				includestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(BasicParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(BasicParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext[] exprlist() {
			return GetRuleContexts<ExprlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist(int i) {
			return GetRuleContext<ExprlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(BasicParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(BasicParser.RPAREN, i);
		}
		public VardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardeclContext vardecl() {
		VardeclContext _localctx = new VardeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_vardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			var_();
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 348;
				Match(LPAREN);
				State = 349;
				exprlist();
				State = 350;
				Match(RPAREN);
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Printstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public Printstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Printstmt1Context printstmt1() {
		Printstmt1Context _localctx = new Printstmt1Context(Context, State);
		EnterRule(_localctx, 16, RULE_printstmt1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(PRINT);
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 358;
				exprlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(BasicParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public GetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetstmtContext getstmt() {
		GetstmtContext _localctx = new GetstmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_getstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(GET);
			State = 362;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableassignmentContext variableassignment() {
			return GetRuleContext<VariableassignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(BasicParser.LET, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_letstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 364;
				Match(LET);
				}
			}

			State = 367;
			variableassignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableassignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringVarDeclContext stringVarDecl() {
			return GetRuleContext<StringVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		public VariableassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableassignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVariableassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVariableassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableassignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableassignmentContext variableassignment() {
		VariableassignmentContext _localctx = new VariableassignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableassignment);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369;
				stringVarDecl();
				State = 370;
				Match(EQ);
				State = 371;
				exprlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				vardecl();
				State = 374;
				Match(EQ);
				State = 375;
				exprlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(BasicParser.DOLLAR, 0); }
		public StringVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStringVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStringVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringVarDeclContext stringVarDecl() {
		StringVarDeclContext _localctx = new StringVarDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_stringVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			var_();
			State = 380;
			Match(DOLLAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BasicParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BasicParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NeqContext neq() {
			return GetRuleContext<NeqContext>(0);
		}
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 26, RULE_relop);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382;
				Match(GTE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				Match(GT);
				State = 384;
				Match(EQ);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385;
				Match(EQ);
				State = 386;
				Match(GT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 387;
				Match(LTE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 388;
				Match(LT);
				State = 389;
				Match(EQ);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 390;
				Match(EQ);
				State = 391;
				Match(LT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 392;
				neq();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 393;
				Match(EQ);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 394;
				Match(GT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 395;
				Match(LT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicParser.GT, 0); }
		public NeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeqContext neq() {
		NeqContext _localctx = new NeqContext(Context, State);
		EnterRule(_localctx, 28, RULE_neq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(LT);
			State = 399;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BasicParser.THEN, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(IF);
			State = 402;
			expression();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 403;
				Match(THEN);
				}
			}

			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
			case PRINT:
			case GOTO:
			case GOSUB:
			case IF:
			case NEXT:
			case CLEAR:
			case LIST:
			case RUN:
			case END:
			case LET:
			case FOR:
			case INPUT:
			case DIM:
			case TEXT:
			case HGR:
			case HGR2:
			case CALL:
			case HPLOT:
			case VPLOT:
			case PRNUMBER:
			case INNUMBER:
			case VTAB:
			case HTAB:
			case HOME:
			case ON:
			case PLOT:
			case POKE:
			case STOP:
			case HIMEM:
			case LOMEM:
			case FLASH:
			case INVERSE:
			case NORMAL:
			case ONERR:
			case TRACE:
			case NOTRACE:
			case DATA:
			case WAIT:
			case READ:
			case XDRAW:
			case DRAW:
			case DEF:
			case TAB:
			case SPEED:
			case ROT:
			case SCALE:
			case COLOR:
			case HCOLOR:
			case HLIN:
			case VLIN:
			case POP:
			case SHLOAD:
			case STORE:
			case RECALL:
			case GET:
			case AMPERSAND:
			case GR:
			case RESTORE:
			case SAVE:
			case LOAD:
			case INCLUDE:
			case CLS:
			case LETTERS:
				{
				State = 406;
				statement();
				}
				break;
			case NUMBER:
			case WS:
			case NEWLINE:
				{
				State = 407;
				linenumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(BasicParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(BasicParser.NEXT, 0); }
		public Forstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterForstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitForstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forstmt1Context forstmt1() {
		Forstmt1Context _localctx = new Forstmt1Context(Context, State);
		EnterRule(_localctx, 32, RULE_forstmt1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(FOR);
			State = 411;
			vardecl();
			State = 412;
			Match(EQ);
			State = 413;
			expression();
			State = 414;
			Match(TO);
			State = 415;
			expression();
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 416;
				Match(STEP);
				State = 417;
				expression();
				}
			}

			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 420;
				statement();
				State = 421;
				Match(NEXT);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LETTERS) {
					{
					State = 422;
					vardecl();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forstmt2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(BasicParser.STEP, 0); }
		public Forstmt2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterForstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitForstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forstmt2Context forstmt2() {
		Forstmt2Context _localctx = new Forstmt2Context(Context, State);
		EnterRule(_localctx, 34, RULE_forstmt2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(FOR);
			State = 428;
			vardecl();
			State = 429;
			Match(EQ);
			State = 430;
			expression();
			State = 431;
			Match(TO);
			State = 432;
			expression();
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 433;
				Match(STEP);
				State = 434;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(BasicParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public NextstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextstmtContext nextstmt() {
		NextstmtContext _localctx = new NextstmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_nextstmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(NEXT);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LETTERS) {
				{
				State = 438;
				vardecl();
				State = 443;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 439;
						Match(COMMA);
						State = 440;
						vardecl();
						}
						} 
					}
					State = 445;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(BasicParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BasicParser.SEMICOLON, 0); }
		public InputstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterInputstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitInputstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputstmtContext inputstmt() {
		InputstmtContext _localctx = new InputstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_inputstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(INPUT);
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL) {
				{
				State = 449;
				Match(STRINGLITERAL);
				State = 450;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA || _la==SEMICOLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 453;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(BasicParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ReadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadstmtContext readstmt() {
		ReadstmtContext _localctx = new ReadstmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_readstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(READ);
			State = 456;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIM() { return GetToken(BasicParser.DIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public DimstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimstmtContext dimstmt() {
		DimstmtContext _localctx = new DimstmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_dimstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(DIM);
			State = 459;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(BasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(GOTO);
			State = 462;
			linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(BasicParser.GOSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(GOSUB);
			State = 465;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POKE() { return GetToken(BasicParser.POKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public PokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPokestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PokestmtContext pokestmt() {
		PokestmtContext _localctx = new PokestmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_pokestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(POKE);
			State = 468;
			expression();
			State = 469;
			Match(COMMA);
			State = 470;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(BasicParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(CALL);
			State = 473;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HplotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HPLOT() { return GetToken(BasicParser.HPLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(BasicParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(BasicParser.TO, i);
		}
		public HplotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hplotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHplotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HplotstmtContext hplotstmt() {
		HplotstmtContext _localctx = new HplotstmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_hplotstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(HPLOT);
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 476;
				expression();
				State = 477;
				Match(COMMA);
				State = 478;
				expression();
				}
				break;
			}
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 482;
				Match(TO);
				State = 483;
				expression();
				State = 484;
				Match(COMMA);
				State = 485;
				expression();
				}
				}
				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VplotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VPLOT() { return GetToken(BasicParser.VPLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(BasicParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(BasicParser.TO, i);
		}
		public VplotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vplotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVplotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VplotstmtContext vplotstmt() {
		VplotstmtContext _localctx = new VplotstmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_vplotstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(VPLOT);
			State = 497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 493;
				expression();
				State = 494;
				Match(COMMA);
				State = 495;
				expression();
				}
				break;
			}
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 499;
				Match(TO);
				State = 500;
				expression();
				State = 501;
				Match(COMMA);
				State = 502;
				expression();
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLOT() { return GetToken(BasicParser.PLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public PlotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPlotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPlotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlotstmtContext plotstmt() {
		PlotstmtContext _localctx = new PlotstmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_plotstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(PLOT);
			State = 510;
			expression();
			State = 511;
			Match(COMMA);
			State = 512;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(BasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public OngotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotostmtContext ongotostmt() {
		OngotostmtContext _localctx = new OngotostmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_ongotostmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(ON);
			State = 515;
			expression();
			State = 516;
			Match(GOTO);
			State = 517;
			linenumber();
			State = 522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 518;
					Match(COMMA);
					State = 519;
					linenumber();
					}
					} 
				}
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(BasicParser.GOSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public OngosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubstmtContext ongosubstmt() {
		OngosubstmtContext _localctx = new OngosubstmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_ongosubstmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(ON);
			State = 526;
			expression();
			State = 527;
			Match(GOSUB);
			State = 528;
			linenumber();
			State = 533;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 529;
					Match(COMMA);
					State = 530;
					linenumber();
					}
					} 
				}
				State = 535;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VtabstmntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VTAB() { return GetToken(BasicParser.VTAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VtabstmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vtabstmnt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVtabstmnt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VtabstmntContext vtabstmnt() {
		VtabstmntContext _localctx = new VtabstmntContext(Context, State);
		EnterRule(_localctx, 62, RULE_vtabstmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(VTAB);
			State = 537;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtabstmntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HTAB() { return GetToken(BasicParser.HTAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HtabstmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htabstmnt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtabstmnt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtabstmntContext htabstmnt() {
		HtabstmntContext _localctx = new HtabstmntContext(Context, State);
		EnterRule(_localctx, 64, RULE_htabstmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(HTAB);
			State = 540;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HimemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIMEM() { return GetToken(BasicParser.HIMEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BasicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HimemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_himemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHimemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHimemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHimemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HimemstmtContext himemstmt() {
		HimemstmtContext _localctx = new HimemstmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_himemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(HIMEM);
			State = 543;
			Match(COLON);
			State = 544;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LomemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOMEM() { return GetToken(BasicParser.LOMEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BasicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LomemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lomemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLomemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLomemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLomemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LomemstmtContext lomemstmt() {
		LomemstmtContext _localctx = new LomemstmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_lomemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(LOMEM);
			State = 547;
			Match(COLON);
			State = 548;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BasicParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public DatastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDatastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDatastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatastmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatastmtContext datastmt() {
		DatastmtContext _localctx = new DatastmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_datastmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(DATA);
			State = 551;
			datum();
			State = 558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 552;
					Match(COMMA);
					State = 554;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						State = 553;
						datum();
						}
						break;
					}
					}
					} 
				}
				State = 560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BasicParser.STRINGLITERAL, 0); }
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDatum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDatum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 72, RULE_datum);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NUMBER:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561;
				number();
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562;
				Match(STRINGLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(BasicParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public WaitstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterWaitstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitWaitstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitstmtContext waitstmt() {
		WaitstmtContext _localctx = new WaitstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_waitstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(WAIT);
			State = 566;
			expression();
			State = 567;
			Match(COMMA);
			State = 568;
			expression();
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 569;
				Match(COMMA);
				State = 570;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XdrawstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XDRAW() { return GetToken(BasicParser.XDRAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public XdrawstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xdrawstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterXdrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitXdrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXdrawstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XdrawstmtContext xdrawstmt() {
		XdrawstmtContext _localctx = new XdrawstmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_xdrawstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(XDRAW);
			State = 574;
			expression();
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 575;
				Match(AT);
				State = 576;
				expression();
				State = 577;
				Match(COMMA);
				State = 578;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAW() { return GetToken(BasicParser.DRAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public DrawstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drawstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrawstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawstmtContext drawstmt() {
		DrawstmtContext _localctx = new DrawstmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_drawstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(DRAW);
			State = 583;
			expression();
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 584;
				Match(AT);
				State = 585;
				expression();
				State = 586;
				Match(COMMA);
				State = 587;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(BasicParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context[] var_() {
			return GetRuleContexts<Var_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_(int i) {
			return GetRuleContext<Var_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(BasicParser.FN, 0); }
		public DefstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDefstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDefstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefstmtContext defstmt() {
		DefstmtContext _localctx = new DefstmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_defstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(DEF);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FN) {
				{
				State = 592;
				Match(FN);
				}
			}

			State = 595;
			var_();
			State = 596;
			Match(LPAREN);
			State = 597;
			var_();
			State = 598;
			Match(RPAREN);
			State = 599;
			Match(EQ);
			State = 600;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(BasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public TabstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterTabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitTabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabstmtContext tabstmt() {
		TabstmtContext _localctx = new TabstmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_tabstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(TAB);
			State = 603;
			Match(LPAREN);
			State = 604;
			expression();
			State = 605;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEED() { return GetToken(BasicParser.SPEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpeedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSpeedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSpeedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedstmtContext speedstmt() {
		SpeedstmtContext _localctx = new SpeedstmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_speedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(SPEED);
			State = 608;
			Match(EQ);
			State = 609;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROT() { return GetToken(BasicParser.ROT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotstmtContext rotstmt() {
		RotstmtContext _localctx = new RotstmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_rotstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(ROT);
			State = 612;
			Match(EQ);
			State = 613;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(BasicParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScalestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterScalestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitScalestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalestmtContext scalestmt() {
		ScalestmtContext _localctx = new ScalestmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_scalestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			Match(SCALE);
			State = 616;
			Match(EQ);
			State = 617;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLOR() { return GetToken(BasicParser.COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterColorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitColorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorstmtContext colorstmt() {
		ColorstmtContext _localctx = new ColorstmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_colorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(COLOR);
			State = 620;
			Match(EQ);
			State = 621;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HcolorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HCOLOR() { return GetToken(BasicParser.HCOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HcolorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hcolorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHcolorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHcolorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHcolorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HcolorstmtContext hcolorstmt() {
		HcolorstmtContext _localctx = new HcolorstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_hcolorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(HCOLOR);
			State = 624;
			Match(EQ);
			State = 625;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HlinstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HLIN() { return GetToken(BasicParser.HLIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		public HlinstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlinstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlinstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HlinstmtContext hlinstmt() {
		HlinstmtContext _localctx = new HlinstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_hlinstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			Match(HLIN);
			State = 628;
			expression();
			State = 629;
			Match(COMMA);
			State = 630;
			expression();
			State = 631;
			Match(AT);
			State = 632;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VlinstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VLIN() { return GetToken(BasicParser.VLIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		public VlinstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vlinstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVlinstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VlinstmtContext vlinstmt() {
		VlinstmtContext _localctx = new VlinstmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_vlinstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(VLIN);
			State = 635;
			expression();
			State = 636;
			Match(COMMA);
			State = 637;
			expression();
			State = 638;
			Match(AT);
			State = 639;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnerrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONERR() { return GetToken(BasicParser.ONERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(BasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public OnerrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onerrstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterOnerrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitOnerrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnerrstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnerrstmtContext onerrstmt() {
		OnerrstmtContext _localctx = new OnerrstmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_onerrstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(ONERR);
			State = 642;
			Match(GOTO);
			State = 643;
			linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRNUMBER() { return GetToken(BasicParser.PRNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		public PrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrstmtContext prstmt() {
		PrstmtContext _localctx = new PrstmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_prstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(PRNUMBER);
			State = 646;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNUMBER() { return GetToken(BasicParser.INNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		public InstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterInstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitInstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstmtContext instmt() {
		InstmtContext _localctx = new InstmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_instmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			Match(INNUMBER);
			State = 649;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORE() { return GetToken(BasicParser.STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		public StorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorestmtContext storestmt() {
		StorestmtContext _localctx = new StorestmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_storestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(STORE);
			State = 652;
			vardecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECALL() { return GetToken(BasicParser.RECALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		public RecallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recallstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRecallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRecallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecallstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecallstmtContext recallstmt() {
		RecallstmtContext _localctx = new RecallstmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_recallstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(RECALL);
			State = 655;
			vardecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(BasicParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListstmtContext liststmt() {
		ListstmtContext _localctx = new ListstmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_liststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(LIST);
			State = 659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 658;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PopstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BasicParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public PopstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_popstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PopstmtContext popstmt() {
		PopstmtContext _localctx = new PopstmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_popstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(POP);
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 662;
				expression();
				State = 663;
				Match(COMMA);
				State = 664;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmptstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(BasicParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AmptstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amptstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAmptstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAmptstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmptstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmptstmtContext amptstmt() {
		AmptstmtContext _localctx = new AmptstmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_amptstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(AMPERSAND);
			State = 669;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BasicParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IncludestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIncludestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIncludestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludestmtContext includestmt() {
		IncludestmtContext _localctx = new IncludestmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_includestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(INCLUDE);
			State = 672;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BasicParser.END, 0); }
		public EndstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndstmtContext endstmt() {
		EndstmtContext _localctx = new EndstmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_endstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicParser.RETURN, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(BasicParser.RESTORE, 0); }
		public RestorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestorestmtContext restorestmt() {
		RestorestmtContext _localctx = new RestorestmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_restorestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(RESTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(BasicParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BasicParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BasicParser.MINUS, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 122, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 680;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 683;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabfuncContext tabfunc() {
			return GetRuleContext<TabfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChrfuncContext chrfunc() {
			return GetRuleContext<ChrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqrfuncContext sqrfunc() {
			return GetRuleContext<SqrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LenfuncContext lenfunc() {
			return GetRuleContext<LenfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrfuncContext strfunc() {
			return GetRuleContext<StrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AscfuncContext ascfunc() {
			return GetRuleContext<AscfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScrnfuncContext scrnfunc() {
			return GetRuleContext<ScrnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MidfuncContext midfunc() {
			return GetRuleContext<MidfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PdlfuncContext pdlfunc() {
			return GetRuleContext<PdlfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeekfuncContext peekfunc() {
			return GetRuleContext<PeekfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntfuncContext intfunc() {
			return GetRuleContext<IntfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcfuncContext spcfunc() {
			return GetRuleContext<SpcfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrefuncContext frefunc() {
			return GetRuleContext<FrefuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PosfuncContext posfunc() {
			return GetRuleContext<PosfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsrfuncContext usrfunc() {
			return GetRuleContext<UsrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeftfuncContext leftfunc() {
			return GetRuleContext<LeftfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValfuncContext valfunc() {
			return GetRuleContext<ValfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightfuncContext rightfunc() {
			return GetRuleContext<RightfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnfuncContext fnfunc() {
			return GetRuleContext<FnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SinfuncContext sinfunc() {
			return GetRuleContext<SinfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CosfuncContext cosfunc() {
			return GetRuleContext<CosfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TanfuncContext tanfunc() {
			return GetRuleContext<TanfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtnfuncContext atnfunc() {
			return GetRuleContext<AtnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RndfuncContext rndfunc() {
			return GetRuleContext<RndfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SgnfuncContext sgnfunc() {
			return GetRuleContext<SgnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpfuncContext expfunc() {
			return GetRuleContext<ExpfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfuncContext logfunc() {
			return GetRuleContext<LogfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbsfuncContext absfunc() {
			return GetRuleContext<AbsfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public Func_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterFunc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitFunc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_Context func_() {
		Func_Context _localctx = new Func_Context(Context, State);
		EnterRule(_localctx, 124, RULE_func_);
		try {
			State = 720;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 685;
				Match(STRINGLITERAL);
				}
				break;
			case PLUS:
			case MINUS:
			case NUMBER:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686;
				number();
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 687;
				tabfunc();
				}
				break;
			case LETTERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 688;
				vardecl();
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 689;
				chrfunc();
				}
				break;
			case SQR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 690;
				sqrfunc();
				}
				break;
			case LEN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 691;
				lenfunc();
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 692;
				strfunc();
				}
				break;
			case ASC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 693;
				ascfunc();
				}
				break;
			case SCRN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 694;
				scrnfunc();
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 11);
				{
				State = 695;
				midfunc();
				}
				break;
			case PDL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 696;
				pdlfunc();
				}
				break;
			case PEEK:
				EnterOuterAlt(_localctx, 13);
				{
				State = 697;
				peekfunc();
				}
				break;
			case INTF:
				EnterOuterAlt(_localctx, 14);
				{
				State = 698;
				intfunc();
				}
				break;
			case SPC:
				EnterOuterAlt(_localctx, 15);
				{
				State = 699;
				spcfunc();
				}
				break;
			case FRE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 700;
				frefunc();
				}
				break;
			case POS:
				EnterOuterAlt(_localctx, 17);
				{
				State = 701;
				posfunc();
				}
				break;
			case USR:
				EnterOuterAlt(_localctx, 18);
				{
				State = 702;
				usrfunc();
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 703;
				leftfunc();
				}
				break;
			case VAL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 704;
				valfunc();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 21);
				{
				State = 705;
				rightfunc();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 22);
				{
				State = 706;
				fnfunc();
				}
				break;
			case SIN:
				EnterOuterAlt(_localctx, 23);
				{
				State = 707;
				sinfunc();
				}
				break;
			case COS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 708;
				cosfunc();
				}
				break;
			case TAN:
				EnterOuterAlt(_localctx, 25);
				{
				State = 709;
				tanfunc();
				}
				break;
			case ATN:
				EnterOuterAlt(_localctx, 26);
				{
				State = 710;
				atnfunc();
				}
				break;
			case RND:
				EnterOuterAlt(_localctx, 27);
				{
				State = 711;
				rndfunc();
				}
				break;
			case SGN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 712;
				sgnfunc();
				}
				break;
			case EXP:
				EnterOuterAlt(_localctx, 29);
				{
				State = 713;
				expfunc();
				}
				break;
			case LOG:
				EnterOuterAlt(_localctx, 30);
				{
				State = 714;
				logfunc();
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 31);
				{
				State = 715;
				absfunc();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 32);
				{
				State = 716;
				Match(LPAREN);
				State = 717;
				expression();
				State = 718;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BasicParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BasicParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BasicParser.MINUS, 0); }
		public SignExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignExpressionContext signExpression() {
		SignExpressionContext _localctx = new SignExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_signExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 722;
				Match(NOT);
				}
			}

			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 725;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 728;
			func_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignExpressionContext[] signExpression() {
			return GetRuleContexts<SignExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExpressionContext signExpression(int i) {
			return GetRuleContext<SignExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPONENT() { return GetTokens(BasicParser.EXPONENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPONENT(int i) {
			return GetToken(BasicParser.EXPONENT, i);
		}
		public ExponentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExponentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExponentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentExpressionContext exponentExpression() {
		ExponentExpressionContext _localctx = new ExponentExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_exponentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			signExpression();
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPONENT) {
				{
				{
				State = 731;
				Match(EXPONENT);
				State = 732;
				signExpression();
				}
				}
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExponentExpressionContext[] exponentExpression() {
			return GetRuleContexts<ExponentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentExpressionContext exponentExpression(int i) {
			return GetRuleContext<ExponentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(BasicParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(BasicParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(BasicParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(BasicParser.DIV, i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterMultiplyingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitMultiplyingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_multiplyingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			exponentExpression();
			State = 743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIV) {
				{
				{
				State = 739;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 740;
				exponentExpression();
				}
				}
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(BasicParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(BasicParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(BasicParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(BasicParser.MINUS, i);
		}
		public AddingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAddingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAddingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddingExpressionContext addingExpression() {
		AddingExpressionContext _localctx = new AddingExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_addingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			multiplyingExpression();
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 747;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 748;
				multiplyingExpression();
				}
				}
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddingExpressionContext[] addingExpression() {
			return GetRuleContexts<AddingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddingExpressionContext addingExpression(int i) {
			return GetRuleContext<AddingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			addingExpression();
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4420796416L) != 0)) {
				{
				State = 755;
				relop();
				State = 756;
				addingExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(BasicParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(BasicParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(BasicParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(BasicParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_expression);
		int _la;
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760;
				func_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 761;
				relationalExpression();
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AND || _la==OR) {
					{
					{
					State = 762;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 763;
					relationalExpression();
					}
					}
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarnameContext varname() {
			return GetRuleContext<VarnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarsuffixContext varsuffix() {
			return GetRuleContext<VarsuffixContext>(0);
		}
		public Var_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_Context var_() {
		Var_Context _localctx = new Var_Context(Context, State);
		EnterRule(_localctx, 138, RULE_var_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			varname();
			State = 773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 772;
				varsuffix();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTERS() { return GetTokens(BasicParser.LETTERS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTERS(int i) {
			return GetToken(BasicParser.LETTERS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(BasicParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(BasicParser.NUMBER, i);
		}
		public VarnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVarname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVarname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarnameContext varname() {
		VarnameContext _localctx = new VarnameContext(Context, State);
		EnterRule(_localctx, 140, RULE_varname);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(LETTERS);
			State = 779;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 776;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTERS || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 781;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(BasicParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BasicParser.PERCENT, 0); }
		public VarsuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVarsuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVarsuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsuffixContext varsuffix() {
		VarsuffixContext _localctx = new VarsuffixContext(Context, State);
		EnterRule(_localctx, 142, RULE_varsuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			_la = TokenStream.LA(1);
			if ( !(_la==DOLLAR || _la==PERCENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 144, RULE_varlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			vardecl();
			State = 789;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 785;
					Match(COMMA);
					State = 786;
					vardecl();
					}
					} 
				}
				State = 791;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 146, RULE_exprlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			expression();
			State = 797;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 793;
					Match(COMMA);
					State = 794;
					expression();
					}
					} 
				}
				State = 799;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQR() { return GetToken(BasicParser.SQR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SqrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSqrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSqrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqrfuncContext sqrfunc() {
		SqrfuncContext _localctx = new SqrfuncContext(Context, State);
		EnterRule(_localctx, 148, RULE_sqrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(SQR);
			State = 801;
			Match(LPAREN);
			State = 802;
			expression();
			State = 803;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(BasicParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ChrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChrfuncContext chrfunc() {
		ChrfuncContext _localctx = new ChrfuncContext(Context, State);
		EnterRule(_localctx, 150, RULE_chrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			Match(CHR);
			State = 806;
			Match(LPAREN);
			State = 807;
			expression();
			State = 808;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(BasicParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public LenfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenfuncContext lenfunc() {
		LenfuncContext _localctx = new LenfuncContext(Context, State);
		EnterRule(_localctx, 152, RULE_lenfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(LEN);
			State = 811;
			Match(LPAREN);
			State = 812;
			expression();
			State = 813;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BasicParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public AscfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscfuncContext ascfunc() {
		AscfuncContext _localctx = new AscfuncContext(Context, State);
		EnterRule(_localctx, 154, RULE_ascfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			Match(ASC);
			State = 816;
			Match(LPAREN);
			State = 817;
			expression();
			State = 818;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(BasicParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public MidfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidfuncContext midfunc() {
		MidfuncContext _localctx = new MidfuncContext(Context, State);
		EnterRule(_localctx, 156, RULE_midfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(MID);
			State = 821;
			Match(LPAREN);
			State = 822;
			expression();
			State = 823;
			Match(COMMA);
			State = 824;
			expression();
			State = 825;
			Match(COMMA);
			State = 826;
			expression();
			State = 827;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PdlfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDL() { return GetToken(BasicParser.PDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public PdlfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pdlfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPdlfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPdlfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPdlfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PdlfuncContext pdlfunc() {
		PdlfuncContext _localctx = new PdlfuncContext(Context, State);
		EnterRule(_localctx, 158, RULE_pdlfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			Match(PDL);
			State = 830;
			Match(LPAREN);
			State = 831;
			expression();
			State = 832;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(BasicParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public PeekfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeekfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeekfuncContext peekfunc() {
		PeekfuncContext _localctx = new PeekfuncContext(Context, State);
		EnterRule(_localctx, 160, RULE_peekfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			Match(PEEK);
			State = 835;
			Match(LPAREN);
			State = 836;
			expression();
			State = 837;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTF() { return GetToken(BasicParser.INTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public IntfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntfuncContext intfunc() {
		IntfuncContext _localctx = new IntfuncContext(Context, State);
		EnterRule(_localctx, 162, RULE_intfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(INTF);
			State = 840;
			Match(LPAREN);
			State = 841;
			expression();
			State = 842;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPC() { return GetToken(BasicParser.SPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SpcfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSpcfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSpcfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcfuncContext spcfunc() {
		SpcfuncContext _localctx = new SpcfuncContext(Context, State);
		EnterRule(_localctx, 164, RULE_spcfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(SPC);
			State = 845;
			Match(LPAREN);
			State = 846;
			expression();
			State = 847;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrefuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRE() { return GetToken(BasicParser.FRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public FrefuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frefunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterFrefunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitFrefunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrefunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrefuncContext frefunc() {
		FrefuncContext _localctx = new FrefuncContext(Context, State);
		EnterRule(_localctx, 166, RULE_frefunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(FRE);
			State = 850;
			Match(LPAREN);
			State = 851;
			expression();
			State = 852;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS() { return GetToken(BasicParser.POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public PosfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PosfuncContext posfunc() {
		PosfuncContext _localctx = new PosfuncContext(Context, State);
		EnterRule(_localctx, 168, RULE_posfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(POS);
			State = 855;
			Match(LPAREN);
			State = 856;
			expression();
			State = 857;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USR() { return GetToken(BasicParser.USR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public UsrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsrfuncContext usrfunc() {
		UsrfuncContext _localctx = new UsrfuncContext(Context, State);
		EnterRule(_localctx, 170, RULE_usrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			Match(USR);
			State = 860;
			Match(LPAREN);
			State = 861;
			expression();
			State = 862;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BasicParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public LeftfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftfuncContext leftfunc() {
		LeftfuncContext _localctx = new LeftfuncContext(Context, State);
		EnterRule(_localctx, 172, RULE_leftfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			Match(LEFT);
			State = 865;
			Match(LPAREN);
			State = 866;
			expression();
			State = 867;
			Match(COMMA);
			State = 868;
			expression();
			State = 869;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BasicParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public RightfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightfuncContext rightfunc() {
		RightfuncContext _localctx = new RightfuncContext(Context, State);
		EnterRule(_localctx, 174, RULE_rightfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			Match(RIGHT);
			State = 872;
			Match(LPAREN);
			State = 873;
			expression();
			State = 874;
			Match(COMMA);
			State = 875;
			expression();
			State = 876;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public StrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrfuncContext strfunc() {
		StrfuncContext _localctx = new StrfuncContext(Context, State);
		EnterRule(_localctx, 176, RULE_strfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(STR);
			State = 879;
			Match(LPAREN);
			State = 880;
			expression();
			State = 881;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(BasicParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public FnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterFnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitFnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnfuncContext fnfunc() {
		FnfuncContext _localctx = new FnfuncContext(Context, State);
		EnterRule(_localctx, 178, RULE_fnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(FN);
			State = 884;
			var_();
			State = 885;
			Match(LPAREN);
			State = 886;
			expression();
			State = 887;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(BasicParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ValfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValfuncContext valfunc() {
		ValfuncContext _localctx = new ValfuncContext(Context, State);
		EnterRule(_localctx, 180, RULE_valfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			Match(VAL);
			State = 890;
			Match(LPAREN);
			State = 891;
			expression();
			State = 892;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScrnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRN() { return GetToken(BasicParser.SCRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ScrnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scrnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterScrnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitScrnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScrnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScrnfuncContext scrnfunc() {
		ScrnfuncContext _localctx = new ScrnfuncContext(Context, State);
		EnterRule(_localctx, 182, RULE_scrnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(SCRN);
			State = 895;
			Match(LPAREN);
			State = 896;
			expression();
			State = 897;
			Match(COMMA);
			State = 898;
			expression();
			State = 899;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(BasicParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SinfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinfuncContext sinfunc() {
		SinfuncContext _localctx = new SinfuncContext(Context, State);
		EnterRule(_localctx, 184, RULE_sinfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(SIN);
			State = 902;
			Match(LPAREN);
			State = 903;
			expression();
			State = 904;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(BasicParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public CosfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterCosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitCosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CosfuncContext cosfunc() {
		CosfuncContext _localctx = new CosfuncContext(Context, State);
		EnterRule(_localctx, 186, RULE_cosfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			Match(COS);
			State = 907;
			Match(LPAREN);
			State = 908;
			expression();
			State = 909;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(BasicParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public TanfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tanfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterTanfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitTanfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTanfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TanfuncContext tanfunc() {
		TanfuncContext _localctx = new TanfuncContext(Context, State);
		EnterRule(_localctx, 188, RULE_tanfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(TAN);
			State = 912;
			Match(LPAREN);
			State = 913;
			expression();
			State = 914;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATN() { return GetToken(BasicParser.ATN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public AtnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAtnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAtnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtnfuncContext atnfunc() {
		AtnfuncContext _localctx = new AtnfuncContext(Context, State);
		EnterRule(_localctx, 190, RULE_atnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			Match(ATN);
			State = 917;
			Match(LPAREN);
			State = 918;
			expression();
			State = 919;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RND() { return GetToken(BasicParser.RND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public RndfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndfuncContext rndfunc() {
		RndfuncContext _localctx = new RndfuncContext(Context, State);
		EnterRule(_localctx, 192, RULE_rndfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			Match(RND);
			State = 922;
			Match(LPAREN);
			State = 923;
			expression();
			State = 924;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SgnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SGN() { return GetToken(BasicParser.SGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SgnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sgnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSgnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SgnfuncContext sgnfunc() {
		SgnfuncContext _localctx = new SgnfuncContext(Context, State);
		EnterRule(_localctx, 194, RULE_sgnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			Match(SGN);
			State = 927;
			Match(LPAREN);
			State = 928;
			expression();
			State = 929;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(BasicParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ExpfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpfuncContext expfunc() {
		ExpfuncContext _localctx = new ExpfuncContext(Context, State);
		EnterRule(_localctx, 196, RULE_expfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			Match(EXP);
			State = 932;
			Match(LPAREN);
			State = 933;
			expression();
			State = 934;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(BasicParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public LogfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLogfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLogfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfuncContext logfunc() {
		LogfuncContext _localctx = new LogfuncContext(Context, State);
		EnterRule(_localctx, 198, RULE_logfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			Match(LOG);
			State = 937;
			Match(LPAREN);
			State = 938;
			expression();
			State = 939;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(BasicParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public AbsfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsfuncContext absfunc() {
		AbsfuncContext _localctx = new AbsfuncContext(Context, State);
		EnterRule(_localctx, 200, RULE_absfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			Match(ABS);
			State = 942;
			Match(LPAREN);
			State = 943;
			expression();
			State = 944;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(BasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public TabfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterTabfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitTabfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabfuncContext tabfunc() {
		TabfuncContext _localctx = new TabfuncContext(Context, State);
		EnterRule(_localctx, 202, RULE_tabfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(TAB);
			State = 947;
			Match(LPAREN);
			State = 948;
			expression();
			State = 949;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,122,952,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,1,0,3,0,206,8,0,1,0,5,0,209,8,0,10,0,
		12,0,212,9,0,1,0,1,0,3,0,216,8,0,1,1,1,1,3,1,220,8,1,1,1,1,1,1,1,3,1,225,
		8,1,5,1,227,8,1,10,1,12,1,230,9,1,1,1,1,1,3,1,234,8,1,1,1,3,1,237,8,1,
		1,2,3,2,240,8,2,1,2,1,2,1,2,3,2,245,8,2,5,2,247,8,2,10,2,12,2,250,9,2,
		1,2,1,2,3,2,254,8,2,1,2,3,2,257,8,2,1,3,1,3,1,4,3,4,262,8,4,1,4,1,4,1,
		5,3,5,267,8,5,1,5,1,5,1,5,5,5,272,8,5,10,5,12,5,275,9,5,1,5,1,5,3,5,279,
		8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,346,8,6,1,7,
		1,7,1,7,1,7,1,7,5,7,353,8,7,10,7,12,7,356,9,7,1,8,1,8,3,8,360,8,8,1,9,
		1,9,1,9,1,10,3,10,366,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,3,11,378,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,397,8,13,1,14,1,14,1,14,1,15,1,15,
		1,15,3,15,405,8,15,1,15,1,15,3,15,409,8,15,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,3,16,419,8,16,1,16,1,16,1,16,3,16,424,8,16,3,16,426,8,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,436,8,17,1,18,1,18,1,18,1,
		18,5,18,442,8,18,10,18,12,18,445,9,18,3,18,447,8,18,1,19,1,19,1,19,3,19,
		452,8,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
		26,3,26,481,8,26,1,26,1,26,1,26,1,26,1,26,5,26,488,8,26,10,26,12,26,491,
		9,26,1,27,1,27,1,27,1,27,1,27,3,27,498,8,27,1,27,1,27,1,27,1,27,1,27,5,
		27,505,8,27,10,27,12,27,508,9,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,29,5,29,521,8,29,10,29,12,29,524,9,29,1,30,1,30,1,30,1,
		30,1,30,1,30,5,30,532,8,30,10,30,12,30,535,9,30,1,31,1,31,1,31,1,32,1,
		32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,
		35,555,8,35,5,35,557,8,35,10,35,12,35,560,9,35,1,36,1,36,3,36,564,8,36,
		1,37,1,37,1,37,1,37,1,37,1,37,3,37,572,8,37,1,38,1,38,1,38,1,38,1,38,1,
		38,1,38,3,38,581,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,590,8,39,
		1,40,1,40,3,40,594,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,
		41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
		44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,
		47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,
		50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,3,54,660,
		8,54,1,55,1,55,1,55,1,55,1,55,3,55,667,8,55,1,56,1,56,1,56,1,57,1,57,1,
		57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,3,61,682,8,61,1,61,1,61,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,3,62,721,8,62,1,63,3,63,724,8,63,1,63,3,63,727,
		8,63,1,63,1,63,1,64,1,64,1,64,5,64,734,8,64,10,64,12,64,737,9,64,1,65,
		1,65,1,65,5,65,742,8,65,10,65,12,65,745,9,65,1,66,1,66,1,66,5,66,750,8,
		66,10,66,12,66,753,9,66,1,67,1,67,1,67,1,67,3,67,759,8,67,1,68,1,68,1,
		68,1,68,5,68,765,8,68,10,68,12,68,768,9,68,3,68,770,8,68,1,69,1,69,3,69,
		774,8,69,1,70,1,70,5,70,778,8,70,10,70,12,70,781,9,70,1,71,1,71,1,72,1,
		72,1,72,5,72,788,8,72,10,72,12,72,791,9,72,1,73,1,73,1,73,5,73,796,8,73,
		10,73,12,73,799,9,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,
		1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,
		1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,
		1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,
		1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,
		1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,
		1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,
		1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,
		1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,
		1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,
		1,101,1,101,1,101,0,0,102,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,0,8,1,0,121,122,2,0,27,27,37,37,1,0,18,19,1,0,119,
		120,1,0,20,21,1,0,73,74,1,0,118,119,1,0,1,2,1014,0,215,1,0,0,0,2,217,1,
		0,0,0,4,239,1,0,0,0,6,258,1,0,0,0,8,261,1,0,0,0,10,278,1,0,0,0,12,345,
		1,0,0,0,14,347,1,0,0,0,16,357,1,0,0,0,18,361,1,0,0,0,20,365,1,0,0,0,22,
		377,1,0,0,0,24,379,1,0,0,0,26,396,1,0,0,0,28,398,1,0,0,0,30,401,1,0,0,
		0,32,410,1,0,0,0,34,427,1,0,0,0,36,437,1,0,0,0,38,448,1,0,0,0,40,455,1,
		0,0,0,42,458,1,0,0,0,44,461,1,0,0,0,46,464,1,0,0,0,48,467,1,0,0,0,50,472,
		1,0,0,0,52,475,1,0,0,0,54,492,1,0,0,0,56,509,1,0,0,0,58,514,1,0,0,0,60,
		525,1,0,0,0,62,536,1,0,0,0,64,539,1,0,0,0,66,542,1,0,0,0,68,546,1,0,0,
		0,70,550,1,0,0,0,72,563,1,0,0,0,74,565,1,0,0,0,76,573,1,0,0,0,78,582,1,
		0,0,0,80,591,1,0,0,0,82,602,1,0,0,0,84,607,1,0,0,0,86,611,1,0,0,0,88,615,
		1,0,0,0,90,619,1,0,0,0,92,623,1,0,0,0,94,627,1,0,0,0,96,634,1,0,0,0,98,
		641,1,0,0,0,100,645,1,0,0,0,102,648,1,0,0,0,104,651,1,0,0,0,106,654,1,
		0,0,0,108,657,1,0,0,0,110,661,1,0,0,0,112,668,1,0,0,0,114,671,1,0,0,0,
		116,674,1,0,0,0,118,676,1,0,0,0,120,678,1,0,0,0,122,681,1,0,0,0,124,720,
		1,0,0,0,126,723,1,0,0,0,128,730,1,0,0,0,130,738,1,0,0,0,132,746,1,0,0,
		0,134,754,1,0,0,0,136,769,1,0,0,0,138,771,1,0,0,0,140,775,1,0,0,0,142,
		782,1,0,0,0,144,784,1,0,0,0,146,792,1,0,0,0,148,800,1,0,0,0,150,805,1,
		0,0,0,152,810,1,0,0,0,154,815,1,0,0,0,156,820,1,0,0,0,158,829,1,0,0,0,
		160,834,1,0,0,0,162,839,1,0,0,0,164,844,1,0,0,0,166,849,1,0,0,0,168,854,
		1,0,0,0,170,859,1,0,0,0,172,864,1,0,0,0,174,871,1,0,0,0,176,878,1,0,0,
		0,178,883,1,0,0,0,180,889,1,0,0,0,182,894,1,0,0,0,184,901,1,0,0,0,186,
		906,1,0,0,0,188,911,1,0,0,0,190,916,1,0,0,0,192,921,1,0,0,0,194,926,1,
		0,0,0,196,931,1,0,0,0,198,936,1,0,0,0,200,941,1,0,0,0,202,946,1,0,0,0,
		204,206,3,4,2,0,205,204,1,0,0,0,205,206,1,0,0,0,206,210,1,0,0,0,207,209,
		3,2,1,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
		0,211,213,1,0,0,0,212,210,1,0,0,0,213,216,5,0,0,1,214,216,5,0,0,1,215,
		205,1,0,0,0,215,214,1,0,0,0,216,1,1,0,0,0,217,219,3,8,4,0,218,220,5,122,
		0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,233,1,0,0,0,221,228,3,10,5,0,222,
		224,5,40,0,0,223,225,3,10,5,0,224,223,1,0,0,0,224,225,1,0,0,0,225,227,
		1,0,0,0,226,222,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,
		0,229,234,1,0,0,0,230,228,1,0,0,0,231,234,5,116,0,0,232,234,5,10,0,0,233,
		221,1,0,0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,236,1,0,0,0,235,237,5,
		122,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,3,1,0,0,0,238,240,5,122,0,
		0,239,238,1,0,0,0,239,240,1,0,0,0,240,253,1,0,0,0,241,248,3,10,5,0,242,
		244,5,40,0,0,243,245,3,10,5,0,244,243,1,0,0,0,244,245,1,0,0,0,245,247,
		1,0,0,0,246,242,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,
		0,249,254,1,0,0,0,250,248,1,0,0,0,251,254,5,116,0,0,252,254,5,10,0,0,253,
		241,1,0,0,0,253,251,1,0,0,0,253,252,1,0,0,0,254,256,1,0,0,0,255,257,5,
		122,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,5,1,0,0,0,258,259,5,108,0,
		0,259,7,1,0,0,0,260,262,7,0,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,
		1,0,0,0,263,264,5,119,0,0,264,9,1,0,0,0,265,267,3,6,3,0,266,265,1,0,0,
		0,266,267,1,0,0,0,267,268,1,0,0,0,268,273,3,12,6,0,269,270,5,27,0,0,270,
		272,3,12,6,0,271,269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,
		0,0,0,274,279,1,0,0,0,275,273,1,0,0,0,276,279,5,116,0,0,277,279,5,10,0,
		0,278,266,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,11,1,0,0,0,280,346,
		5,115,0,0,281,346,5,113,0,0,282,346,5,112,0,0,283,346,5,71,0,0,284,346,
		5,72,0,0,285,346,5,63,0,0,286,346,5,64,0,0,287,346,5,109,0,0,288,346,5,
		65,0,0,289,346,5,94,0,0,290,346,5,22,0,0,291,346,5,29,0,0,292,346,5,60,
		0,0,293,346,5,41,0,0,294,346,5,53,0,0,295,346,5,42,0,0,296,346,5,43,0,
		0,297,346,3,116,58,0,298,346,3,118,59,0,299,346,3,120,60,0,300,346,3,112,
		56,0,301,346,3,110,55,0,302,346,3,108,54,0,303,346,3,104,52,0,304,346,
		3,18,9,0,305,346,3,106,53,0,306,346,3,36,18,0,307,346,3,102,51,0,308,346,
		3,100,50,0,309,346,3,98,49,0,310,346,3,94,47,0,311,346,3,96,48,0,312,346,
		3,90,45,0,313,346,3,84,42,0,314,346,3,88,44,0,315,346,3,86,43,0,316,346,
		3,92,46,0,317,346,3,66,33,0,318,346,3,68,34,0,319,346,3,16,8,0,320,346,
		3,48,24,0,321,346,3,56,28,0,322,346,3,58,29,0,323,346,3,60,30,0,324,346,
		3,30,15,0,325,346,3,32,16,0,326,346,3,34,17,0,327,346,3,38,19,0,328,346,
		3,82,41,0,329,346,3,42,21,0,330,346,3,44,22,0,331,346,3,46,23,0,332,346,
		3,50,25,0,333,346,3,40,20,0,334,346,3,52,26,0,335,346,3,54,27,0,336,346,
		3,62,31,0,337,346,3,64,32,0,338,346,3,74,37,0,339,346,3,70,35,0,340,346,
		3,76,38,0,341,346,3,78,39,0,342,346,3,80,40,0,343,346,3,20,10,0,344,346,
		3,114,57,0,345,280,1,0,0,0,345,281,1,0,0,0,345,282,1,0,0,0,345,283,1,0,
		0,0,345,284,1,0,0,0,345,285,1,0,0,0,345,286,1,0,0,0,345,287,1,0,0,0,345,
		288,1,0,0,0,345,289,1,0,0,0,345,290,1,0,0,0,345,291,1,0,0,0,345,292,1,
		0,0,0,345,293,1,0,0,0,345,294,1,0,0,0,345,295,1,0,0,0,345,296,1,0,0,0,
		345,297,1,0,0,0,345,298,1,0,0,0,345,299,1,0,0,0,345,300,1,0,0,0,345,301,
		1,0,0,0,345,302,1,0,0,0,345,303,1,0,0,0,345,304,1,0,0,0,345,305,1,0,0,
		0,345,306,1,0,0,0,345,307,1,0,0,0,345,308,1,0,0,0,345,309,1,0,0,0,345,
		310,1,0,0,0,345,311,1,0,0,0,345,312,1,0,0,0,345,313,1,0,0,0,345,314,1,
		0,0,0,345,315,1,0,0,0,345,316,1,0,0,0,345,317,1,0,0,0,345,318,1,0,0,0,
		345,319,1,0,0,0,345,320,1,0,0,0,345,321,1,0,0,0,345,322,1,0,0,0,345,323,
		1,0,0,0,345,324,1,0,0,0,345,325,1,0,0,0,345,326,1,0,0,0,345,327,1,0,0,
		0,345,328,1,0,0,0,345,329,1,0,0,0,345,330,1,0,0,0,345,331,1,0,0,0,345,
		332,1,0,0,0,345,333,1,0,0,0,345,334,1,0,0,0,345,335,1,0,0,0,345,336,1,
		0,0,0,345,337,1,0,0,0,345,338,1,0,0,0,345,339,1,0,0,0,345,340,1,0,0,0,
		345,341,1,0,0,0,345,342,1,0,0,0,345,343,1,0,0,0,345,344,1,0,0,0,346,13,
		1,0,0,0,347,354,3,138,69,0,348,349,5,16,0,0,349,350,3,146,73,0,350,351,
		5,17,0,0,351,353,1,0,0,0,352,348,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,
		0,354,355,1,0,0,0,355,15,1,0,0,0,356,354,1,0,0,0,357,359,5,4,0,0,358,360,
		3,146,73,0,359,358,1,0,0,0,359,360,1,0,0,0,360,17,1,0,0,0,361,362,5,106,
		0,0,362,363,3,146,73,0,363,19,1,0,0,0,364,366,5,31,0,0,365,364,1,0,0,0,
		365,366,1,0,0,0,366,367,1,0,0,0,367,368,3,22,11,0,368,21,1,0,0,0,369,370,
		3,24,12,0,370,371,5,32,0,0,371,372,3,146,73,0,372,378,1,0,0,0,373,374,
		3,14,7,0,374,375,5,32,0,0,375,376,3,146,73,0,376,378,1,0,0,0,377,369,1,
		0,0,0,377,373,1,0,0,0,378,23,1,0,0,0,379,380,3,138,69,0,380,381,5,1,0,
		0,381,25,1,0,0,0,382,397,5,23,0,0,383,384,5,25,0,0,384,397,5,32,0,0,385,
		386,5,32,0,0,386,397,5,25,0,0,387,397,5,24,0,0,388,389,5,26,0,0,389,397,
		5,32,0,0,390,391,5,32,0,0,391,397,5,26,0,0,392,397,3,28,14,0,393,397,5,
		32,0,0,394,397,5,25,0,0,395,397,5,26,0,0,396,382,1,0,0,0,396,383,1,0,0,
		0,396,385,1,0,0,0,396,387,1,0,0,0,396,388,1,0,0,0,396,390,1,0,0,0,396,
		392,1,0,0,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,27,1,0,
		0,0,398,399,5,26,0,0,399,400,5,25,0,0,400,29,1,0,0,0,401,402,5,7,0,0,402,
		404,3,136,68,0,403,405,5,9,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,408,
		1,0,0,0,406,409,3,12,6,0,407,409,3,8,4,0,408,406,1,0,0,0,408,407,1,0,0,
		0,409,31,1,0,0,0,410,411,5,33,0,0,411,412,3,14,7,0,412,413,5,32,0,0,413,
		414,3,136,68,0,414,415,5,34,0,0,415,418,3,136,68,0,416,417,5,35,0,0,417,
		419,3,136,68,0,418,416,1,0,0,0,418,419,1,0,0,0,419,425,1,0,0,0,420,421,
		3,12,6,0,421,423,5,8,0,0,422,424,3,14,7,0,423,422,1,0,0,0,423,424,1,0,
		0,0,424,426,1,0,0,0,425,420,1,0,0,0,425,426,1,0,0,0,426,33,1,0,0,0,427,
		428,5,33,0,0,428,429,3,14,7,0,429,430,5,32,0,0,430,431,3,136,68,0,431,
		432,5,34,0,0,432,435,3,136,68,0,433,434,5,35,0,0,434,436,3,136,68,0,435,
		433,1,0,0,0,435,436,1,0,0,0,436,35,1,0,0,0,437,446,5,8,0,0,438,443,3,14,
		7,0,439,440,5,27,0,0,440,442,3,14,7,0,441,439,1,0,0,0,442,445,1,0,0,0,
		443,441,1,0,0,0,443,444,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,446,438,
		1,0,0,0,446,447,1,0,0,0,447,37,1,0,0,0,448,451,5,36,0,0,449,450,5,117,
		0,0,450,452,7,1,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,
		454,3,144,72,0,454,39,1,0,0,0,455,456,5,77,0,0,456,457,3,144,72,0,457,
		41,1,0,0,0,458,459,5,38,0,0,459,460,3,144,72,0,460,43,1,0,0,0,461,462,
		5,5,0,0,462,463,3,8,4,0,463,45,1,0,0,0,464,465,5,6,0,0,465,466,3,136,68,
		0,466,47,1,0,0,0,467,468,5,58,0,0,468,469,3,136,68,0,469,470,5,27,0,0,
		470,471,3,136,68,0,471,49,1,0,0,0,472,473,5,45,0,0,473,474,3,146,73,0,
		474,51,1,0,0,0,475,480,5,47,0,0,476,477,3,136,68,0,477,478,5,27,0,0,478,
		479,3,136,68,0,479,481,1,0,0,0,480,476,1,0,0,0,480,481,1,0,0,0,481,489,
		1,0,0,0,482,483,5,34,0,0,483,484,3,136,68,0,484,485,5,27,0,0,485,486,3,
		136,68,0,486,488,1,0,0,0,487,482,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,
		0,489,490,1,0,0,0,490,53,1,0,0,0,491,489,1,0,0,0,492,497,5,48,0,0,493,
		494,3,136,68,0,494,495,5,27,0,0,495,496,3,136,68,0,496,498,1,0,0,0,497,
		493,1,0,0,0,497,498,1,0,0,0,498,506,1,0,0,0,499,500,5,34,0,0,500,501,3,
		136,68,0,501,502,5,27,0,0,502,503,3,136,68,0,503,505,1,0,0,0,504,499,1,
		0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,55,1,0,0,0,508,
		506,1,0,0,0,509,510,5,56,0,0,510,511,3,136,68,0,511,512,5,27,0,0,512,513,
		3,136,68,0,513,57,1,0,0,0,514,515,5,54,0,0,515,516,3,136,68,0,516,517,
		5,5,0,0,517,522,3,8,4,0,518,519,5,27,0,0,519,521,3,8,4,0,520,518,1,0,0,
		0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,59,1,0,0,0,524,522,
		1,0,0,0,525,526,5,54,0,0,526,527,3,136,68,0,527,528,5,6,0,0,528,533,3,
		8,4,0,529,530,5,27,0,0,530,532,3,8,4,0,531,529,1,0,0,0,532,535,1,0,0,0,
		533,531,1,0,0,0,533,534,1,0,0,0,534,61,1,0,0,0,535,533,1,0,0,0,536,537,
		5,51,0,0,537,538,3,136,68,0,538,63,1,0,0,0,539,540,5,52,0,0,540,541,3,
		136,68,0,541,65,1,0,0,0,542,543,5,61,0,0,543,544,5,40,0,0,544,545,3,136,
		68,0,545,67,1,0,0,0,546,547,5,62,0,0,547,548,5,40,0,0,548,549,3,136,68,
		0,549,69,1,0,0,0,550,551,5,75,0,0,551,558,3,72,36,0,552,554,5,27,0,0,553,
		555,3,72,36,0,554,553,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,552,
		1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,71,1,0,0,0,
		560,558,1,0,0,0,561,564,3,122,61,0,562,564,5,117,0,0,563,561,1,0,0,0,563,
		562,1,0,0,0,564,73,1,0,0,0,565,566,5,76,0,0,566,567,3,136,68,0,567,568,
		5,27,0,0,568,571,3,136,68,0,569,570,5,27,0,0,570,572,3,136,68,0,571,569,
		1,0,0,0,571,572,1,0,0,0,572,75,1,0,0,0,573,574,5,78,0,0,574,580,3,136,
		68,0,575,576,5,80,0,0,576,577,3,136,68,0,577,578,5,27,0,0,578,579,3,136,
		68,0,579,581,1,0,0,0,580,575,1,0,0,0,580,581,1,0,0,0,581,77,1,0,0,0,582,
		583,5,79,0,0,583,589,3,136,68,0,584,585,5,80,0,0,585,586,3,136,68,0,586,
		587,5,27,0,0,587,588,3,136,68,0,588,590,1,0,0,0,589,584,1,0,0,0,589,590,
		1,0,0,0,590,79,1,0,0,0,591,593,5,81,0,0,592,594,5,82,0,0,593,592,1,0,0,
		0,593,594,1,0,0,0,594,595,1,0,0,0,595,596,3,138,69,0,596,597,5,16,0,0,
		597,598,3,138,69,0,598,599,5,17,0,0,599,600,5,32,0,0,600,601,3,136,68,
		0,601,81,1,0,0,0,602,603,5,84,0,0,603,604,5,16,0,0,604,605,3,136,68,0,
		605,606,5,17,0,0,606,83,1,0,0,0,607,608,5,85,0,0,608,609,5,32,0,0,609,
		610,3,136,68,0,610,85,1,0,0,0,611,612,5,86,0,0,612,613,5,32,0,0,613,614,
		3,136,68,0,614,87,1,0,0,0,615,616,5,87,0,0,616,617,5,32,0,0,617,618,3,
		136,68,0,618,89,1,0,0,0,619,620,5,88,0,0,620,621,5,32,0,0,621,622,3,136,
		68,0,622,91,1,0,0,0,623,624,5,89,0,0,624,625,5,32,0,0,625,626,3,136,68,
		0,626,93,1,0,0,0,627,628,5,90,0,0,628,629,3,136,68,0,629,630,5,27,0,0,
		630,631,3,136,68,0,631,632,5,80,0,0,632,633,3,136,68,0,633,95,1,0,0,0,
		634,635,5,91,0,0,635,636,3,136,68,0,636,637,5,27,0,0,637,638,3,136,68,
		0,638,639,5,80,0,0,639,640,3,136,68,0,640,97,1,0,0,0,641,642,5,66,0,0,
		642,643,5,5,0,0,643,644,3,8,4,0,644,99,1,0,0,0,645,646,5,49,0,0,646,647,
		5,119,0,0,647,101,1,0,0,0,648,649,5,50,0,0,649,650,5,119,0,0,650,103,1,
		0,0,0,651,652,5,104,0,0,652,653,3,14,7,0,653,105,1,0,0,0,654,655,5,105,
		0,0,655,656,3,14,7,0,656,107,1,0,0,0,657,659,5,28,0,0,658,660,3,136,68,
		0,659,658,1,0,0,0,659,660,1,0,0,0,660,109,1,0,0,0,661,666,5,93,0,0,662,
		663,3,136,68,0,663,664,5,27,0,0,664,665,3,136,68,0,665,667,1,0,0,0,666,
		662,1,0,0,0,666,667,1,0,0,0,667,111,1,0,0,0,668,669,5,108,0,0,669,670,
		3,136,68,0,670,113,1,0,0,0,671,672,5,114,0,0,672,673,3,136,68,0,673,115,
		1,0,0,0,674,675,5,30,0,0,675,117,1,0,0,0,676,677,5,3,0,0,677,119,1,0,0,
		0,678,679,5,111,0,0,679,121,1,0,0,0,680,682,7,2,0,0,681,680,1,0,0,0,681,
		682,1,0,0,0,682,683,1,0,0,0,683,684,7,3,0,0,684,123,1,0,0,0,685,721,5,
		117,0,0,686,721,3,122,61,0,687,721,3,202,101,0,688,721,3,14,7,0,689,721,
		3,150,75,0,690,721,3,148,74,0,691,721,3,152,76,0,692,721,3,176,88,0,693,
		721,3,154,77,0,694,721,3,182,91,0,695,721,3,156,78,0,696,721,3,158,79,
		0,697,721,3,160,80,0,698,721,3,162,81,0,699,721,3,164,82,0,700,721,3,166,
		83,0,701,721,3,168,84,0,702,721,3,170,85,0,703,721,3,172,86,0,704,721,
		3,180,90,0,705,721,3,174,87,0,706,721,3,178,89,0,707,721,3,184,92,0,708,
		721,3,186,93,0,709,721,3,188,94,0,710,721,3,190,95,0,711,721,3,192,96,
		0,712,721,3,194,97,0,713,721,3,196,98,0,714,721,3,198,99,0,715,721,3,200,
		100,0,716,717,5,16,0,0,717,718,3,136,68,0,718,719,5,17,0,0,719,721,1,0,
		0,0,720,685,1,0,0,0,720,686,1,0,0,0,720,687,1,0,0,0,720,688,1,0,0,0,720,
		689,1,0,0,0,720,690,1,0,0,0,720,691,1,0,0,0,720,692,1,0,0,0,720,693,1,
		0,0,0,720,694,1,0,0,0,720,695,1,0,0,0,720,696,1,0,0,0,720,697,1,0,0,0,
		720,698,1,0,0,0,720,699,1,0,0,0,720,700,1,0,0,0,720,701,1,0,0,0,720,702,
		1,0,0,0,720,703,1,0,0,0,720,704,1,0,0,0,720,705,1,0,0,0,720,706,1,0,0,
		0,720,707,1,0,0,0,720,708,1,0,0,0,720,709,1,0,0,0,720,710,1,0,0,0,720,
		711,1,0,0,0,720,712,1,0,0,0,720,713,1,0,0,0,720,714,1,0,0,0,720,715,1,
		0,0,0,720,716,1,0,0,0,721,125,1,0,0,0,722,724,5,110,0,0,723,722,1,0,0,
		0,723,724,1,0,0,0,724,726,1,0,0,0,725,727,7,2,0,0,726,725,1,0,0,0,726,
		727,1,0,0,0,727,728,1,0,0,0,728,729,3,124,62,0,729,127,1,0,0,0,730,735,
		3,126,63,0,731,732,5,107,0,0,732,734,3,126,63,0,733,731,1,0,0,0,734,737,
		1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,129,1,0,0,0,737,735,1,0,0,
		0,738,743,3,128,64,0,739,740,7,4,0,0,740,742,3,128,64,0,741,739,1,0,0,
		0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,131,1,0,0,0,745,
		743,1,0,0,0,746,751,3,130,65,0,747,748,7,2,0,0,748,750,3,130,65,0,749,
		747,1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,133,1,
		0,0,0,753,751,1,0,0,0,754,758,3,132,66,0,755,756,3,26,13,0,756,757,3,132,
		66,0,757,759,1,0,0,0,758,755,1,0,0,0,758,759,1,0,0,0,759,135,1,0,0,0,760,
		770,3,124,62,0,761,766,3,134,67,0,762,763,7,5,0,0,763,765,3,134,67,0,764,
		762,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,770,1,
		0,0,0,768,766,1,0,0,0,769,760,1,0,0,0,769,761,1,0,0,0,770,137,1,0,0,0,
		771,773,3,140,70,0,772,774,3,142,71,0,773,772,1,0,0,0,773,774,1,0,0,0,
		774,139,1,0,0,0,775,779,5,118,0,0,776,778,7,6,0,0,777,776,1,0,0,0,778,
		781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,141,1,0,0,0,781,779,1,
		0,0,0,782,783,7,7,0,0,783,143,1,0,0,0,784,789,3,14,7,0,785,786,5,27,0,
		0,786,788,3,14,7,0,787,785,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,
		790,1,0,0,0,790,145,1,0,0,0,791,789,1,0,0,0,792,797,3,136,68,0,793,794,
		5,27,0,0,794,796,3,136,68,0,795,793,1,0,0,0,796,799,1,0,0,0,797,795,1,
		0,0,0,797,798,1,0,0,0,798,147,1,0,0,0,799,797,1,0,0,0,800,801,5,39,0,0,
		801,802,5,16,0,0,802,803,3,136,68,0,803,804,5,17,0,0,804,149,1,0,0,0,805,
		806,5,11,0,0,806,807,5,16,0,0,807,808,3,136,68,0,808,809,5,17,0,0,809,
		151,1,0,0,0,810,811,5,44,0,0,811,812,5,16,0,0,812,813,3,136,68,0,813,814,
		5,17,0,0,814,153,1,0,0,0,815,816,5,46,0,0,816,817,5,16,0,0,817,818,3,136,
		68,0,818,819,5,17,0,0,819,155,1,0,0,0,820,821,5,12,0,0,821,822,5,16,0,
		0,822,823,3,136,68,0,823,824,5,27,0,0,824,825,3,136,68,0,825,826,5,27,
		0,0,826,827,3,136,68,0,827,828,5,17,0,0,828,157,1,0,0,0,829,830,5,55,0,
		0,830,831,5,16,0,0,831,832,3,136,68,0,832,833,5,17,0,0,833,159,1,0,0,0,
		834,835,5,57,0,0,835,836,5,16,0,0,836,837,3,136,68,0,837,838,5,17,0,0,
		838,161,1,0,0,0,839,840,5,59,0,0,840,841,5,16,0,0,841,842,3,136,68,0,842,
		843,5,17,0,0,843,163,1,0,0,0,844,845,5,67,0,0,845,846,5,16,0,0,846,847,
		3,136,68,0,847,848,5,17,0,0,848,165,1,0,0,0,849,850,5,68,0,0,850,851,5,
		16,0,0,851,852,3,136,68,0,852,853,5,17,0,0,853,167,1,0,0,0,854,855,5,69,
		0,0,855,856,5,16,0,0,856,857,3,136,68,0,857,858,5,17,0,0,858,169,1,0,0,
		0,859,860,5,70,0,0,860,861,5,16,0,0,861,862,3,136,68,0,862,863,5,17,0,
		0,863,171,1,0,0,0,864,865,5,13,0,0,865,866,5,16,0,0,866,867,3,136,68,0,
		867,868,5,27,0,0,868,869,3,136,68,0,869,870,5,17,0,0,870,173,1,0,0,0,871,
		872,5,14,0,0,872,873,5,16,0,0,873,874,3,136,68,0,874,875,5,27,0,0,875,
		876,3,136,68,0,876,877,5,17,0,0,877,175,1,0,0,0,878,879,5,15,0,0,879,880,
		5,16,0,0,880,881,3,136,68,0,881,882,5,17,0,0,882,177,1,0,0,0,883,884,5,
		82,0,0,884,885,3,138,69,0,885,886,5,16,0,0,886,887,3,136,68,0,887,888,
		5,17,0,0,888,179,1,0,0,0,889,890,5,83,0,0,890,891,5,16,0,0,891,892,3,136,
		68,0,892,893,5,17,0,0,893,181,1,0,0,0,894,895,5,92,0,0,895,896,5,16,0,
		0,896,897,3,136,68,0,897,898,5,27,0,0,898,899,3,136,68,0,899,900,5,17,
		0,0,900,183,1,0,0,0,901,902,5,95,0,0,902,903,5,16,0,0,903,904,3,136,68,
		0,904,905,5,17,0,0,905,185,1,0,0,0,906,907,5,96,0,0,907,908,5,16,0,0,908,
		909,3,136,68,0,909,910,5,17,0,0,910,187,1,0,0,0,911,912,5,97,0,0,912,913,
		5,16,0,0,913,914,3,136,68,0,914,915,5,17,0,0,915,189,1,0,0,0,916,917,5,
		98,0,0,917,918,5,16,0,0,918,919,3,136,68,0,919,920,5,17,0,0,920,191,1,
		0,0,0,921,922,5,99,0,0,922,923,5,16,0,0,923,924,3,136,68,0,924,925,5,17,
		0,0,925,193,1,0,0,0,926,927,5,100,0,0,927,928,5,16,0,0,928,929,3,136,68,
		0,929,930,5,17,0,0,930,195,1,0,0,0,931,932,5,101,0,0,932,933,5,16,0,0,
		933,934,3,136,68,0,934,935,5,17,0,0,935,197,1,0,0,0,936,937,5,102,0,0,
		937,938,5,16,0,0,938,939,3,136,68,0,939,940,5,17,0,0,940,199,1,0,0,0,941,
		942,5,103,0,0,942,943,5,16,0,0,943,944,3,136,68,0,944,945,5,17,0,0,945,
		201,1,0,0,0,946,947,5,84,0,0,947,948,5,16,0,0,948,949,3,136,68,0,949,950,
		5,17,0,0,950,203,1,0,0,0,61,205,210,215,219,224,228,233,236,239,244,248,
		253,256,261,266,273,278,345,354,359,365,377,396,404,408,418,423,425,435,
		443,446,451,480,489,497,506,522,533,554,558,563,571,580,589,593,659,666,
		681,720,723,726,735,743,751,758,766,769,773,779,789,797
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JesseFreeman.BasicInterpreter.AntlrGenerated
