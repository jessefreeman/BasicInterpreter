//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Basic.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JesseFreeman.BasicInterpreter.AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class BasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOLLAR=1, PERCENT=2, RETURN=3, PRINT=4, GOTO=5, GOSUB=6, IF=7, NEXT=8, 
		THEN=9, REM=10, CHR=11, MID=12, LEFT=13, RIGHT=14, STR=15, LPAREN=16, 
		RPAREN=17, PLUS=18, MINUS=19, TIMES=20, DIV=21, CLEAR=22, GTE=23, LTE=24, 
		GT=25, LT=26, COMMA=27, LIST=28, RUN=29, END=30, LET=31, EQ=32, FOR=33, 
		TO=34, STEP=35, INPUT=36, SEMICOLON=37, DIM=38, SQR=39, COLON=40, TEXT=41, 
		HGR=42, HGR2=43, LEN=44, CALL=45, ASC=46, HPLOT=47, VPLOT=48, PRNUMBER=49, 
		INNUMBER=50, VTAB=51, HTAB=52, HOME=53, ON=54, PDL=55, PLOT=56, PEEK=57, 
		POKE=58, INTF=59, STOP=60, HIMEM=61, LOMEM=62, FLASH=63, INVERSE=64, NORMAL=65, 
		ONERR=66, SPC=67, FRE=68, POS=69, USR=70, TRACE=71, NOTRACE=72, AND=73, 
		OR=74, DATA=75, WAIT=76, READ=77, XDRAW=78, DRAW=79, AT=80, DEF=81, FN=82, 
		VAL=83, TAB=84, SPEED=85, ROT=86, SCALE=87, COLOR=88, HCOLOR=89, HLIN=90, 
		VLIN=91, SCRN=92, POP=93, SHLOAD=94, SIN=95, COS=96, TAN=97, ATN=98, RND=99, 
		SGN=100, EXP=101, LOG=102, ABS=103, STORE=104, RECALL=105, GET=106, EXPONENT=107, 
		AMPERSAND=108, GR=109, NOT=110, RESTORE=111, SAVE=112, LOAD=113, INCLUDE=114, 
		CLS=115, COMMENT=116, STRINGLITERAL=117, LETTERS=118, NUMBER=119, FLOAT=120, 
		WS=121, NEWLINE=122;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_lineWithoutNumber = 2, RULE_amperoper = 3, 
		RULE_linenumber = 4, RULE_amprstmt = 5, RULE_statement = 6, RULE_vardecl = 7, 
		RULE_printstmt1 = 8, RULE_getstmt = 9, RULE_letstmt = 10, RULE_variableassignment = 11, 
		RULE_relop = 12, RULE_neq = 13, RULE_ifstmt = 14, RULE_forstmt1 = 15, 
		RULE_forstmt2 = 16, RULE_nextstmt = 17, RULE_inputstmt = 18, RULE_readstmt = 19, 
		RULE_dimstmt = 20, RULE_gotostmt = 21, RULE_gosubstmt = 22, RULE_pokestmt = 23, 
		RULE_callstmt = 24, RULE_hplotstmt = 25, RULE_vplotstmt = 26, RULE_plotstmt = 27, 
		RULE_ongotostmt = 28, RULE_ongosubstmt = 29, RULE_vtabstmnt = 30, RULE_htabstmnt = 31, 
		RULE_himemstmt = 32, RULE_lomemstmt = 33, RULE_datastmt = 34, RULE_datum = 35, 
		RULE_waitstmt = 36, RULE_xdrawstmt = 37, RULE_drawstmt = 38, RULE_defstmt = 39, 
		RULE_tabstmt = 40, RULE_speedstmt = 41, RULE_rotstmt = 42, RULE_scalestmt = 43, 
		RULE_colorstmt = 44, RULE_hcolorstmt = 45, RULE_hlinstmt = 46, RULE_vlinstmt = 47, 
		RULE_onerrstmt = 48, RULE_prstmt = 49, RULE_instmt = 50, RULE_storestmt = 51, 
		RULE_recallstmt = 52, RULE_liststmt = 53, RULE_popstmt = 54, RULE_amptstmt = 55, 
		RULE_includestmt = 56, RULE_endstmt = 57, RULE_returnstmt = 58, RULE_restorestmt = 59, 
		RULE_number = 60, RULE_func_ = 61, RULE_signExpression = 62, RULE_exponentExpression = 63, 
		RULE_multiplyingExpression = 64, RULE_addingExpression = 65, RULE_relationalExpression = 66, 
		RULE_expression = 67, RULE_var_ = 68, RULE_varname = 69, RULE_varsuffix = 70, 
		RULE_varlist = 71, RULE_exprlist = 72, RULE_sqrfunc = 73, RULE_chrfunc = 74, 
		RULE_lenfunc = 75, RULE_ascfunc = 76, RULE_midfunc = 77, RULE_pdlfunc = 78, 
		RULE_peekfunc = 79, RULE_intfunc = 80, RULE_spcfunc = 81, RULE_frefunc = 82, 
		RULE_posfunc = 83, RULE_usrfunc = 84, RULE_leftfunc = 85, RULE_rightfunc = 86, 
		RULE_strfunc = 87, RULE_fnfunc = 88, RULE_valfunc = 89, RULE_scrnfunc = 90, 
		RULE_sinfunc = 91, RULE_cosfunc = 92, RULE_tanfunc = 93, RULE_atnfunc = 94, 
		RULE_rndfunc = 95, RULE_sgnfunc = 96, RULE_expfunc = 97, RULE_logfunc = 98, 
		RULE_absfunc = 99, RULE_tabfunc = 100;
	public static readonly string[] ruleNames = {
		"prog", "line", "lineWithoutNumber", "amperoper", "linenumber", "amprstmt", 
		"statement", "vardecl", "printstmt1", "getstmt", "letstmt", "variableassignment", 
		"relop", "neq", "ifstmt", "forstmt1", "forstmt2", "nextstmt", "inputstmt", 
		"readstmt", "dimstmt", "gotostmt", "gosubstmt", "pokestmt", "callstmt", 
		"hplotstmt", "vplotstmt", "plotstmt", "ongotostmt", "ongosubstmt", "vtabstmnt", 
		"htabstmnt", "himemstmt", "lomemstmt", "datastmt", "datum", "waitstmt", 
		"xdrawstmt", "drawstmt", "defstmt", "tabstmt", "speedstmt", "rotstmt", 
		"scalestmt", "colorstmt", "hcolorstmt", "hlinstmt", "vlinstmt", "onerrstmt", 
		"prstmt", "instmt", "storestmt", "recallstmt", "liststmt", "popstmt", 
		"amptstmt", "includestmt", "endstmt", "returnstmt", "restorestmt", "number", 
		"func_", "signExpression", "exponentExpression", "multiplyingExpression", 
		"addingExpression", "relationalExpression", "expression", "var_", "varname", 
		"varsuffix", "varlist", "exprlist", "sqrfunc", "chrfunc", "lenfunc", "ascfunc", 
		"midfunc", "pdlfunc", "peekfunc", "intfunc", "spcfunc", "frefunc", "posfunc", 
		"usrfunc", "leftfunc", "rightfunc", "strfunc", "fnfunc", "valfunc", "scrnfunc", 
		"sinfunc", "cosfunc", "tanfunc", "atnfunc", "rndfunc", "sgnfunc", "expfunc", 
		"logfunc", "absfunc", "tabfunc"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'%'", "'RETURN'", "'PRINT'", "'GOTO'", "'GOSUB'", "'IF'", 
		"'NEXT'", "'THEN'", "'REM'", "'CHR$'", "'MID$'", "'LEFT$'", "'RIGHT$'", 
		"'STR$'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'CLEAR'", "'>: '", 
		"'<: '", "'>'", "'<'", "','", "'LIST'", "'RUN'", "'END'", "'LET'", "'='", 
		"'FOR'", "'TO'", "'STEP'", "'INPUT'", "';'", "'DIM'", "'SQR'", "':'", 
		"'TEXT'", "'HGR'", "'HGR2'", "'LEN'", "'CALL'", "'ASC'", "'HPLOT'", "'VPLOT'", 
		"'PR#'", "'IN#'", "'VTAB'", "'HTAB'", "'HOME'", "'ON'", "'PDL'", "'PLOT'", 
		"'PEEK'", "'POKE'", "'INT'", "'STOP'", "'HIMEM'", "'LOMEM'", "'FLASH'", 
		"'INVERSE'", "'NORMAL'", "'ONERR'", "'SPC'", "'FRE'", "'POS'", "'USR'", 
		"'TRACE'", "'NOTRACE'", "'AND'", "'OR'", "'DATA'", "'WAIT'", "'READ'", 
		"'XDRAW'", "'DRAW'", "'AT'", "'DEF'", "'FN'", "'VAL'", "'TAB'", "'SPEED'", 
		"'ROT'", "'SCALE'", "'COLOR'", "'HCOLOR'", "'HLIN'", "'VLIN'", "'SCRN'", 
		"'POP'", "'SHLOAD'", "'SIN'", "'COS'", "'TAN'", "'ATN'", "'RND'", "'SGN'", 
		"'EXP'", "'LOG'", "'ABS'", "'STORE'", "'RECALL'", "'GET'", "'^'", "'&'", 
		"'GR'", "'NOT'", "'RESTORE'", "'SAVE'", "'LOAD'", "'INCLUDE'", "'CLS'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOLLAR", "PERCENT", "RETURN", "PRINT", "GOTO", "GOSUB", "IF", "NEXT", 
		"THEN", "REM", "CHR", "MID", "LEFT", "RIGHT", "STR", "LPAREN", "RPAREN", 
		"PLUS", "MINUS", "TIMES", "DIV", "CLEAR", "GTE", "LTE", "GT", "LT", "COMMA", 
		"LIST", "RUN", "END", "LET", "EQ", "FOR", "TO", "STEP", "INPUT", "SEMICOLON", 
		"DIM", "SQR", "COLON", "TEXT", "HGR", "HGR2", "LEN", "CALL", "ASC", "HPLOT", 
		"VPLOT", "PRNUMBER", "INNUMBER", "VTAB", "HTAB", "HOME", "ON", "PDL", 
		"PLOT", "PEEK", "POKE", "INTF", "STOP", "HIMEM", "LOMEM", "FLASH", "INVERSE", 
		"NORMAL", "ONERR", "SPC", "FRE", "POS", "USR", "TRACE", "NOTRACE", "AND", 
		"OR", "DATA", "WAIT", "READ", "XDRAW", "DRAW", "AT", "DEF", "FN", "VAL", 
		"TAB", "SPEED", "ROT", "SCALE", "COLOR", "HCOLOR", "HLIN", "VLIN", "SCRN", 
		"POP", "SHLOAD", "SIN", "COS", "TAN", "ATN", "RND", "SGN", "EXP", "LOG", 
		"ABS", "STORE", "RECALL", "GET", "EXPONENT", "AMPERSAND", "GR", "NOT", 
		"RESTORE", "SAVE", "LOAD", "INCLUDE", "CLS", "COMMENT", "STRINGLITERAL", 
		"LETTERS", "NUMBER", "FLOAT", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BasicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineWithoutNumberContext lineWithoutNumber() {
			return GetRuleContext<LineWithoutNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 202;
					lineWithoutNumber();
					}
					break;
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 13L) != 0)) {
					{
					{
					State = 205;
					line();
					}
					}
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 211;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext[] amprstmt() {
			return GetRuleContexts<AmprstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext amprstmt(int i) {
			return GetRuleContext<AmprstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(BasicParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(BasicParser.REM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(BasicParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(BasicParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BasicParser.COLON, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			linenumber();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 216;
				Match(NEWLINE);
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 219;
				amprstmt();
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COLON) {
					{
					{
					State = 220;
					Match(COLON);
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -756694541133675016L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 26941335293589895L) != 0)) {
						{
						State = 221;
						amprstmt();
						}
					}

					}
					}
					State = 228;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 229;
				Match(COMMENT);
				}
				break;
			case 3:
				{
				State = 230;
				Match(REM);
				}
				break;
			}
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 233;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineWithoutNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext[] amprstmt() {
			return GetRuleContexts<AmprstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmprstmtContext amprstmt(int i) {
			return GetRuleContext<AmprstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(BasicParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(BasicParser.REM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(BasicParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(BasicParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BasicParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BasicParser.COLON, i);
		}
		public LineWithoutNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineWithoutNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLineWithoutNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLineWithoutNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineWithoutNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineWithoutNumberContext lineWithoutNumber() {
		LineWithoutNumberContext _localctx = new LineWithoutNumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_lineWithoutNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 236;
				Match(NEWLINE);
				}
			}

			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 239;
				amprstmt();
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COLON) {
					{
					{
					State = 240;
					Match(COLON);
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -756694541133675016L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 26941335293589895L) != 0)) {
						{
						State = 241;
						amprstmt();
						}
					}

					}
					}
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 249;
				Match(COMMENT);
				}
				break;
			case 3:
				{
				State = 250;
				Match(REM);
				}
				break;
			}
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 253;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmperoperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(BasicParser.AMPERSAND, 0); }
		public AmperoperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amperoper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAmperoper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAmperoper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmperoper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmperoperContext amperoper() {
		AmperoperContext _localctx = new AmperoperContext(Context, State);
		EnterRule(_localctx, 6, RULE_amperoper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(AMPERSAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinenumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(BasicParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(BasicParser.NEWLINE, 0); }
		public LinenumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linenumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLinenumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLinenumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinenumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinenumberContext linenumber() {
		LinenumberContext _localctx = new LinenumberContext(Context, State);
		EnterRule(_localctx, 8, RULE_linenumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS || _la==NEWLINE) {
				{
				State = 258;
				_la = TokenStream.LA(1);
				if ( !(_la==WS || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 261;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmprstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmperoperContext amperoper() {
			return GetRuleContext<AmperoperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(BasicParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(BasicParser.REM, 0); }
		public AmprstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amprstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAmprstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAmprstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmprstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmprstmtContext amprstmt() {
		AmprstmtContext _localctx = new AmprstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_amprstmt);
		int _la;
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
			case PRINT:
			case GOTO:
			case GOSUB:
			case IF:
			case NEXT:
			case CLEAR:
			case LIST:
			case RUN:
			case END:
			case LET:
			case FOR:
			case INPUT:
			case DIM:
			case TEXT:
			case HGR:
			case HGR2:
			case CALL:
			case HPLOT:
			case VPLOT:
			case PRNUMBER:
			case INNUMBER:
			case VTAB:
			case HTAB:
			case HOME:
			case ON:
			case PLOT:
			case POKE:
			case STOP:
			case HIMEM:
			case LOMEM:
			case FLASH:
			case INVERSE:
			case NORMAL:
			case ONERR:
			case TRACE:
			case NOTRACE:
			case DATA:
			case WAIT:
			case READ:
			case XDRAW:
			case DRAW:
			case DEF:
			case TAB:
			case SPEED:
			case ROT:
			case SCALE:
			case COLOR:
			case HCOLOR:
			case HLIN:
			case VLIN:
			case POP:
			case SHLOAD:
			case STORE:
			case RECALL:
			case GET:
			case AMPERSAND:
			case GR:
			case RESTORE:
			case SAVE:
			case LOAD:
			case INCLUDE:
			case CLS:
			case LETTERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 263;
					amperoper();
					}
					break;
				}
				State = 266;
				statement();
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 267;
					Match(COMMA);
					State = 268;
					statement();
					}
					}
					State = 273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				Match(COMMENT);
				}
				break;
			case REM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275;
				Match(REM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLS() { return GetToken(BasicParser.CLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(BasicParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(BasicParser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(BasicParser.TRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTRACE() { return GetToken(BasicParser.NOTRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLASH() { return GetToken(BasicParser.FLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVERSE() { return GetToken(BasicParser.INVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GR() { return GetToken(BasicParser.GR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMAL() { return GetToken(BasicParser.NORMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHLOAD() { return GetToken(BasicParser.SHLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLEAR() { return GetToken(BasicParser.CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUN() { return GetToken(BasicParser.RUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(BasicParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(BasicParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOME() { return GetToken(BasicParser.HOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HGR() { return GetToken(BasicParser.HGR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HGR2() { return GetToken(BasicParser.HGR2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndstmtContext endstmt() {
			return GetRuleContext<EndstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestorestmtContext restorestmt() {
			return GetRuleContext<RestorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AmptstmtContext amptstmt() {
			return GetRuleContext<AmptstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PopstmtContext popstmt() {
			return GetRuleContext<PopstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListstmtContext liststmt() {
			return GetRuleContext<ListstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorestmtContext storestmt() {
			return GetRuleContext<StorestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetstmtContext getstmt() {
			return GetRuleContext<GetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecallstmtContext recallstmt() {
			return GetRuleContext<RecallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NextstmtContext nextstmt() {
			return GetRuleContext<NextstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstmtContext instmt() {
			return GetRuleContext<InstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrstmtContext prstmt() {
			return GetRuleContext<PrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnerrstmtContext onerrstmt() {
			return GetRuleContext<OnerrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HlinstmtContext hlinstmt() {
			return GetRuleContext<HlinstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VlinstmtContext vlinstmt() {
			return GetRuleContext<VlinstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorstmtContext colorstmt() {
			return GetRuleContext<ColorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeedstmtContext speedstmt() {
			return GetRuleContext<SpeedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalestmtContext scalestmt() {
			return GetRuleContext<ScalestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RotstmtContext rotstmt() {
			return GetRuleContext<RotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HcolorstmtContext hcolorstmt() {
			return GetRuleContext<HcolorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HimemstmtContext himemstmt() {
			return GetRuleContext<HimemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LomemstmtContext lomemstmt() {
			return GetRuleContext<LomemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Printstmt1Context printstmt1() {
			return GetRuleContext<Printstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PokestmtContext pokestmt() {
			return GetRuleContext<PokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlotstmtContext plotstmt() {
			return GetRuleContext<PlotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngotostmtContext ongotostmt() {
			return GetRuleContext<OngotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OngosubstmtContext ongosubstmt() {
			return GetRuleContext<OngosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forstmt1Context forstmt1() {
			return GetRuleContext<Forstmt1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forstmt2Context forstmt2() {
			return GetRuleContext<Forstmt2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputstmtContext inputstmt() {
			return GetRuleContext<InputstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabstmtContext tabstmt() {
			return GetRuleContext<TabstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimstmtContext dimstmt() {
			return GetRuleContext<DimstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotostmtContext gotostmt() {
			return GetRuleContext<GotostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GosubstmtContext gosubstmt() {
			return GetRuleContext<GosubstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReadstmtContext readstmt() {
			return GetRuleContext<ReadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HplotstmtContext hplotstmt() {
			return GetRuleContext<HplotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VplotstmtContext vplotstmt() {
			return GetRuleContext<VplotstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VtabstmntContext vtabstmnt() {
			return GetRuleContext<VtabstmntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtabstmntContext htabstmnt() {
			return GetRuleContext<HtabstmntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitstmtContext waitstmt() {
			return GetRuleContext<WaitstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatastmtContext datastmt() {
			return GetRuleContext<DatastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XdrawstmtContext xdrawstmt() {
			return GetRuleContext<XdrawstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DrawstmtContext drawstmt() {
			return GetRuleContext<DrawstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefstmtContext defstmt() {
			return GetRuleContext<DefstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetstmtContext letstmt() {
			return GetRuleContext<LetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludestmtContext includestmt() {
			return GetRuleContext<IncludestmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				Match(CLS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279;
				Match(LOAD);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 280;
				Match(SAVE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281;
				Match(TRACE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 282;
				Match(NOTRACE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 283;
				Match(FLASH);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 284;
				Match(INVERSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 285;
				Match(GR);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 286;
				Match(NORMAL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 287;
				Match(SHLOAD);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 288;
				Match(CLEAR);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 289;
				Match(RUN);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 290;
				Match(STOP);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 291;
				Match(TEXT);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 292;
				Match(HOME);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 293;
				Match(HGR);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 294;
				Match(HGR2);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 295;
				endstmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 296;
				returnstmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 297;
				restorestmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 298;
				amptstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 299;
				popstmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 300;
				liststmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 301;
				storestmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 302;
				getstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 303;
				recallstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 304;
				nextstmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 305;
				instmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 306;
				prstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 307;
				onerrstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 308;
				hlinstmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 309;
				vlinstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 310;
				colorstmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 311;
				speedstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 312;
				scalestmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 313;
				rotstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 314;
				hcolorstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 315;
				himemstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 316;
				lomemstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 317;
				printstmt1();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 318;
				pokestmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 319;
				plotstmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 320;
				ongotostmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 321;
				ongosubstmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 322;
				ifstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 323;
				forstmt1();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 324;
				forstmt2();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 325;
				inputstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 326;
				tabstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 327;
				dimstmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 328;
				gotostmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 329;
				gosubstmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 330;
				callstmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 331;
				readstmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 332;
				hplotstmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 333;
				vplotstmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 334;
				vtabstmnt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 335;
				htabstmnt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 336;
				waitstmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 337;
				datastmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 338;
				xdrawstmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 339;
				drawstmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 340;
				defstmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 341;
				letstmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 342;
				includestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(BasicParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(BasicParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext[] exprlist() {
			return GetRuleContexts<ExprlistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist(int i) {
			return GetRuleContext<ExprlistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(BasicParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(BasicParser.RPAREN, i);
		}
		public VardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVardecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardeclContext vardecl() {
		VardeclContext _localctx = new VardeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_vardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			var_();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN) {
				{
				{
				State = 346;
				Match(LPAREN);
				State = 347;
				exprlist();
				State = 348;
				Match(RPAREN);
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Printstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public Printstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Printstmt1Context printstmt1() {
		Printstmt1Context _localctx = new Printstmt1Context(Context, State);
		EnterRule(_localctx, 16, RULE_printstmt1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(PRINT);
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 356;
				exprlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(BasicParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public GetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetstmtContext getstmt() {
		GetstmtContext _localctx = new GetstmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_getstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(GET);
			State = 360;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableassignmentContext variableassignment() {
			return GetRuleContext<VariableassignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(BasicParser.LET, 0); }
		public LetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetstmtContext letstmt() {
		LetstmtContext _localctx = new LetstmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_letstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET) {
				{
				State = 362;
				Match(LET);
				}
			}

			State = 365;
			variableassignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableassignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public VariableassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableassignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVariableassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVariableassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableassignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableassignmentContext variableassignment() {
		VariableassignmentContext _localctx = new VariableassignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_variableassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			vardecl();
			State = 368;
			Match(EQ);
			State = 369;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BasicParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BasicParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NeqContext neq() {
			return GetRuleContext<NeqContext>(0);
		}
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 24, RULE_relop);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 371;
				Match(GTE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 372;
				Match(GT);
				State = 373;
				Match(EQ);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				Match(EQ);
				State = 375;
				Match(GT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376;
				Match(LTE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 377;
				Match(LT);
				State = 378;
				Match(EQ);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 379;
				Match(EQ);
				State = 380;
				Match(LT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 381;
				neq();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 382;
				Match(EQ);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 383;
				Match(GT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 384;
				Match(LT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicParser.GT, 0); }
		public NeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeqContext neq() {
		NeqContext _localctx = new NeqContext(Context, State);
		EnterRule(_localctx, 26, RULE_neq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(LT);
			State = 388;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BasicParser.THEN, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			Match(IF);
			State = 391;
			expression();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 392;
				Match(THEN);
				}
			}

			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
			case PRINT:
			case GOTO:
			case GOSUB:
			case IF:
			case NEXT:
			case CLEAR:
			case LIST:
			case RUN:
			case END:
			case LET:
			case FOR:
			case INPUT:
			case DIM:
			case TEXT:
			case HGR:
			case HGR2:
			case CALL:
			case HPLOT:
			case VPLOT:
			case PRNUMBER:
			case INNUMBER:
			case VTAB:
			case HTAB:
			case HOME:
			case ON:
			case PLOT:
			case POKE:
			case STOP:
			case HIMEM:
			case LOMEM:
			case FLASH:
			case INVERSE:
			case NORMAL:
			case ONERR:
			case TRACE:
			case NOTRACE:
			case DATA:
			case WAIT:
			case READ:
			case XDRAW:
			case DRAW:
			case DEF:
			case TAB:
			case SPEED:
			case ROT:
			case SCALE:
			case COLOR:
			case HCOLOR:
			case HLIN:
			case VLIN:
			case POP:
			case SHLOAD:
			case STORE:
			case RECALL:
			case GET:
			case AMPERSAND:
			case GR:
			case RESTORE:
			case SAVE:
			case LOAD:
			case INCLUDE:
			case CLS:
			case LETTERS:
				{
				State = 395;
				statement();
				}
				break;
			case NUMBER:
			case WS:
			case NEWLINE:
				{
				State = 396;
				linenumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forstmt1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(BasicParser.STEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(BasicParser.NEXT, 0); }
		public Forstmt1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterForstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitForstmt1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forstmt1Context forstmt1() {
		Forstmt1Context _localctx = new Forstmt1Context(Context, State);
		EnterRule(_localctx, 30, RULE_forstmt1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(FOR);
			State = 400;
			vardecl();
			State = 401;
			Match(EQ);
			State = 402;
			expression();
			State = 403;
			Match(TO);
			State = 404;
			expression();
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 405;
				Match(STEP);
				State = 406;
				expression();
				}
			}

			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 409;
				statement();
				State = 410;
				Match(NEXT);
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LETTERS) {
					{
					State = 411;
					vardecl();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forstmt2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BasicParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BasicParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEP() { return GetToken(BasicParser.STEP, 0); }
		public Forstmt2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterForstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitForstmt2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forstmt2Context forstmt2() {
		Forstmt2Context _localctx = new Forstmt2Context(Context, State);
		EnterRule(_localctx, 32, RULE_forstmt2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(FOR);
			State = 417;
			vardecl();
			State = 418;
			Match(EQ);
			State = 419;
			expression();
			State = 420;
			Match(TO);
			State = 421;
			expression();
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STEP) {
				{
				State = 422;
				Match(STEP);
				State = 423;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(BasicParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public NextstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextstmtContext nextstmt() {
		NextstmtContext _localctx = new NextstmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_nextstmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(NEXT);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LETTERS) {
				{
				State = 427;
				vardecl();
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 428;
						Match(COMMA);
						State = 429;
						vardecl();
						}
						} 
					}
					State = 434;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(BasicParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BasicParser.SEMICOLON, 0); }
		public InputstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterInputstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitInputstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputstmtContext inputstmt() {
		InputstmtContext _localctx = new InputstmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_inputstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(INPUT);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRINGLITERAL) {
				{
				State = 438;
				Match(STRINGLITERAL);
				State = 439;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA || _la==SEMICOLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 442;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(BasicParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public ReadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadstmtContext readstmt() {
		ReadstmtContext _localctx = new ReadstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_readstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(READ);
			State = 445;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIM() { return GetToken(BasicParser.DIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		public DimstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDimstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimstmtContext dimstmt() {
		DimstmtContext _localctx = new DimstmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_dimstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(DIM);
			State = 448;
			varlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(BasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public GotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotostmtContext gotostmt() {
		GotostmtContext _localctx = new GotostmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_gotostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(GOTO);
			State = 451;
			linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(BasicParser.GOSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitGosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GosubstmtContext gosubstmt() {
		GosubstmtContext _localctx = new GosubstmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_gosubstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(GOSUB);
			State = 454;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POKE() { return GetToken(BasicParser.POKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public PokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPokestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PokestmtContext pokestmt() {
		PokestmtContext _localctx = new PokestmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_pokestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(POKE);
			State = 457;
			expression();
			State = 458;
			Match(COMMA);
			State = 459;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(BasicParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(CALL);
			State = 462;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HplotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HPLOT() { return GetToken(BasicParser.HPLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(BasicParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(BasicParser.TO, i);
		}
		public HplotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hplotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHplotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HplotstmtContext hplotstmt() {
		HplotstmtContext _localctx = new HplotstmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_hplotstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(HPLOT);
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 465;
				expression();
				State = 466;
				Match(COMMA);
				State = 467;
				expression();
				}
				break;
			}
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 471;
				Match(TO);
				State = 472;
				expression();
				State = 473;
				Match(COMMA);
				State = 474;
				expression();
				}
				}
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VplotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VPLOT() { return GetToken(BasicParser.VPLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO() { return GetTokens(BasicParser.TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO(int i) {
			return GetToken(BasicParser.TO, i);
		}
		public VplotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vplotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVplotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVplotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VplotstmtContext vplotstmt() {
		VplotstmtContext _localctx = new VplotstmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_vplotstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(VPLOT);
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 482;
				expression();
				State = 483;
				Match(COMMA);
				State = 484;
				expression();
				}
				break;
			}
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 488;
				Match(TO);
				State = 489;
				expression();
				State = 490;
				Match(COMMA);
				State = 491;
				expression();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLOT() { return GetToken(BasicParser.PLOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public PlotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPlotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPlotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlotstmtContext plotstmt() {
		PlotstmtContext _localctx = new PlotstmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_plotstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(PLOT);
			State = 499;
			expression();
			State = 500;
			Match(COMMA);
			State = 501;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngotostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(BasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public OngotostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongotostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitOngotostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngotostmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngotostmtContext ongotostmt() {
		OngotostmtContext _localctx = new OngotostmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_ongotostmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(ON);
			State = 504;
			expression();
			State = 505;
			Match(GOTO);
			State = 506;
			linenumber();
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 507;
					Match(COMMA);
					State = 508;
					linenumber();
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OngosubstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BasicParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOSUB() { return GetToken(BasicParser.GOSUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext[] linenumber() {
			return GetRuleContexts<LinenumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber(int i) {
			return GetRuleContext<LinenumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public OngosubstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ongosubstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitOngosubstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOngosubstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OngosubstmtContext ongosubstmt() {
		OngosubstmtContext _localctx = new OngosubstmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_ongosubstmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(ON);
			State = 515;
			expression();
			State = 516;
			Match(GOSUB);
			State = 517;
			linenumber();
			State = 522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 518;
					Match(COMMA);
					State = 519;
					linenumber();
					}
					} 
				}
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VtabstmntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VTAB() { return GetToken(BasicParser.VTAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VtabstmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vtabstmnt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVtabstmnt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VtabstmntContext vtabstmnt() {
		VtabstmntContext _localctx = new VtabstmntContext(Context, State);
		EnterRule(_localctx, 60, RULE_vtabstmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(VTAB);
			State = 526;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtabstmntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HTAB() { return GetToken(BasicParser.HTAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HtabstmntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htabstmnt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHtabstmnt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtabstmnt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtabstmntContext htabstmnt() {
		HtabstmntContext _localctx = new HtabstmntContext(Context, State);
		EnterRule(_localctx, 62, RULE_htabstmnt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(HTAB);
			State = 529;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HimemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIMEM() { return GetToken(BasicParser.HIMEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BasicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HimemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_himemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHimemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHimemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHimemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HimemstmtContext himemstmt() {
		HimemstmtContext _localctx = new HimemstmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_himemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(HIMEM);
			State = 532;
			Match(COLON);
			State = 533;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LomemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOMEM() { return GetToken(BasicParser.LOMEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BasicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LomemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lomemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLomemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLomemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLomemstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LomemstmtContext lomemstmt() {
		LomemstmtContext _localctx = new LomemstmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_lomemstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(LOMEM);
			State = 536;
			Match(COLON);
			State = 537;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BasicParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatumContext[] datum() {
			return GetRuleContexts<DatumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatumContext datum(int i) {
			return GetRuleContext<DatumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public DatastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDatastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDatastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatastmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatastmtContext datastmt() {
		DatastmtContext _localctx = new DatastmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_datastmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(DATA);
			State = 540;
			datum();
			State = 547;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 541;
					Match(COMMA);
					State = 543;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
					case 1:
						{
						State = 542;
						datum();
						}
						break;
					}
					}
					} 
				}
				State = 549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BasicParser.STRINGLITERAL, 0); }
		public DatumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDatum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDatum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatumContext datum() {
		DatumContext _localctx = new DatumContext(Context, State);
		EnterRule(_localctx, 70, RULE_datum);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NUMBER:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550;
				number();
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 551;
				Match(STRINGLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(BasicParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public WaitstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterWaitstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitWaitstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitstmtContext waitstmt() {
		WaitstmtContext _localctx = new WaitstmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_waitstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(WAIT);
			State = 555;
			expression();
			State = 556;
			Match(COMMA);
			State = 557;
			expression();
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 558;
				Match(COMMA);
				State = 559;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XdrawstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XDRAW() { return GetToken(BasicParser.XDRAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public XdrawstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xdrawstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterXdrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitXdrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXdrawstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XdrawstmtContext xdrawstmt() {
		XdrawstmtContext _localctx = new XdrawstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_xdrawstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(XDRAW);
			State = 563;
			expression();
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 564;
				Match(AT);
				State = 565;
				expression();
				State = 566;
				Match(COMMA);
				State = 567;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrawstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DRAW() { return GetToken(BasicParser.DRAW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public DrawstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drawstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDrawstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrawstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrawstmtContext drawstmt() {
		DrawstmtContext _localctx = new DrawstmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_drawstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(DRAW);
			State = 572;
			expression();
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 573;
				Match(AT);
				State = 574;
				expression();
				State = 575;
				Match(COMMA);
				State = 576;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(BasicParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context[] var_() {
			return GetRuleContexts<Var_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_(int i) {
			return GetRuleContext<Var_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(BasicParser.FN, 0); }
		public DefstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterDefstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitDefstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefstmtContext defstmt() {
		DefstmtContext _localctx = new DefstmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_defstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(DEF);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FN) {
				{
				State = 581;
				Match(FN);
				}
			}

			State = 584;
			var_();
			State = 585;
			Match(LPAREN);
			State = 586;
			var_();
			State = 587;
			Match(RPAREN);
			State = 588;
			Match(EQ);
			State = 589;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(BasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public TabstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterTabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitTabstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabstmtContext tabstmt() {
		TabstmtContext _localctx = new TabstmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_tabstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(TAB);
			State = 592;
			Match(LPAREN);
			State = 593;
			expression();
			State = 594;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEED() { return GetToken(BasicParser.SPEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpeedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSpeedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSpeedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedstmtContext speedstmt() {
		SpeedstmtContext _localctx = new SpeedstmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_speedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(SPEED);
			State = 597;
			Match(EQ);
			State = 598;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RotstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROT() { return GetToken(BasicParser.ROT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RotstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rotstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRotstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RotstmtContext rotstmt() {
		RotstmtContext _localctx = new RotstmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_rotstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(ROT);
			State = 601;
			Match(EQ);
			State = 602;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(BasicParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScalestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterScalestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitScalestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalestmtContext scalestmt() {
		ScalestmtContext _localctx = new ScalestmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_scalestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(SCALE);
			State = 605;
			Match(EQ);
			State = 606;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLOR() { return GetToken(BasicParser.COLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterColorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitColorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorstmtContext colorstmt() {
		ColorstmtContext _localctx = new ColorstmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_colorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(COLOR);
			State = 609;
			Match(EQ);
			State = 610;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HcolorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HCOLOR() { return GetToken(BasicParser.HCOLOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HcolorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hcolorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHcolorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHcolorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHcolorstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HcolorstmtContext hcolorstmt() {
		HcolorstmtContext _localctx = new HcolorstmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_hcolorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(HCOLOR);
			State = 613;
			Match(EQ);
			State = 614;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HlinstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HLIN() { return GetToken(BasicParser.HLIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		public HlinstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlinstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterHlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitHlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlinstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HlinstmtContext hlinstmt() {
		HlinstmtContext _localctx = new HlinstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_hlinstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(HLIN);
			State = 617;
			expression();
			State = 618;
			Match(COMMA);
			State = 619;
			expression();
			State = 620;
			Match(AT);
			State = 621;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VlinstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VLIN() { return GetToken(BasicParser.VLIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BasicParser.AT, 0); }
		public VlinstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vlinstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVlinstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVlinstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VlinstmtContext vlinstmt() {
		VlinstmtContext _localctx = new VlinstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_vlinstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(VLIN);
			State = 624;
			expression();
			State = 625;
			Match(COMMA);
			State = 626;
			expression();
			State = 627;
			Match(AT);
			State = 628;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnerrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONERR() { return GetToken(BasicParser.ONERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(BasicParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinenumberContext linenumber() {
			return GetRuleContext<LinenumberContext>(0);
		}
		public OnerrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onerrstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterOnerrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitOnerrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnerrstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnerrstmtContext onerrstmt() {
		OnerrstmtContext _localctx = new OnerrstmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_onerrstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			Match(ONERR);
			State = 631;
			Match(GOTO);
			State = 632;
			linenumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRNUMBER() { return GetToken(BasicParser.PRNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		public PrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrstmtContext prstmt() {
		PrstmtContext _localctx = new PrstmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_prstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(PRNUMBER);
			State = 635;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNUMBER() { return GetToken(BasicParser.INNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		public InstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterInstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitInstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstmtContext instmt() {
		InstmtContext _localctx = new InstmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_instmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(INNUMBER);
			State = 638;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORE() { return GetToken(BasicParser.STORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		public StorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorestmtContext storestmt() {
		StorestmtContext _localctx = new StorestmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_storestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(STORE);
			State = 641;
			vardecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECALL() { return GetToken(BasicParser.RECALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		public RecallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recallstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRecallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRecallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecallstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecallstmtContext recallstmt() {
		RecallstmtContext _localctx = new RecallstmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_recallstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(RECALL);
			State = 644;
			vardecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(BasicParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitListstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListstmtContext liststmt() {
		ListstmtContext _localctx = new ListstmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_liststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(LIST);
			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 647;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PopstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BasicParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		public PopstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_popstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPopstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PopstmtContext popstmt() {
		PopstmtContext _localctx = new PopstmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_popstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(POP);
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 651;
				expression();
				State = 652;
				Match(COMMA);
				State = 653;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmptstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(BasicParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AmptstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amptstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAmptstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAmptstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmptstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmptstmtContext amptstmt() {
		AmptstmtContext _localctx = new AmptstmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_amptstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(AMPERSAND);
			State = 658;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BasicParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IncludestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIncludestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIncludestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludestmtContext includestmt() {
		IncludestmtContext _localctx = new IncludestmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_includestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(INCLUDE);
			State = 661;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BasicParser.END, 0); }
		public EndstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitEndstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndstmtContext endstmt() {
		EndstmtContext _localctx = new EndstmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_endstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BasicParser.RETURN, 0); }
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestorestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE() { return GetToken(BasicParser.RESTORE, 0); }
		public RestorestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restorestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRestorestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestorestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestorestmtContext restorestmt() {
		RestorestmtContext _localctx = new RestorestmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_restorestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(RESTORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BasicParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(BasicParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BasicParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BasicParser.MINUS, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 120, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 669;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 672;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(BasicParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabfuncContext tabfunc() {
			return GetRuleContext<TabfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl() {
			return GetRuleContext<VardeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChrfuncContext chrfunc() {
			return GetRuleContext<ChrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqrfuncContext sqrfunc() {
			return GetRuleContext<SqrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LenfuncContext lenfunc() {
			return GetRuleContext<LenfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrfuncContext strfunc() {
			return GetRuleContext<StrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AscfuncContext ascfunc() {
			return GetRuleContext<AscfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScrnfuncContext scrnfunc() {
			return GetRuleContext<ScrnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MidfuncContext midfunc() {
			return GetRuleContext<MidfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PdlfuncContext pdlfunc() {
			return GetRuleContext<PdlfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeekfuncContext peekfunc() {
			return GetRuleContext<PeekfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntfuncContext intfunc() {
			return GetRuleContext<IntfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcfuncContext spcfunc() {
			return GetRuleContext<SpcfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrefuncContext frefunc() {
			return GetRuleContext<FrefuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PosfuncContext posfunc() {
			return GetRuleContext<PosfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsrfuncContext usrfunc() {
			return GetRuleContext<UsrfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeftfuncContext leftfunc() {
			return GetRuleContext<LeftfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValfuncContext valfunc() {
			return GetRuleContext<ValfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightfuncContext rightfunc() {
			return GetRuleContext<RightfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnfuncContext fnfunc() {
			return GetRuleContext<FnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SinfuncContext sinfunc() {
			return GetRuleContext<SinfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CosfuncContext cosfunc() {
			return GetRuleContext<CosfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TanfuncContext tanfunc() {
			return GetRuleContext<TanfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtnfuncContext atnfunc() {
			return GetRuleContext<AtnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RndfuncContext rndfunc() {
			return GetRuleContext<RndfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SgnfuncContext sgnfunc() {
			return GetRuleContext<SgnfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpfuncContext expfunc() {
			return GetRuleContext<ExpfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfuncContext logfunc() {
			return GetRuleContext<LogfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbsfuncContext absfunc() {
			return GetRuleContext<AbsfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public Func_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterFunc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitFunc_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_Context func_() {
		Func_Context _localctx = new Func_Context(Context, State);
		EnterRule(_localctx, 122, RULE_func_);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674;
				Match(STRINGLITERAL);
				}
				break;
			case PLUS:
			case MINUS:
			case NUMBER:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675;
				number();
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 676;
				tabfunc();
				}
				break;
			case LETTERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 677;
				vardecl();
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 678;
				chrfunc();
				}
				break;
			case SQR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 679;
				sqrfunc();
				}
				break;
			case LEN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 680;
				lenfunc();
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 681;
				strfunc();
				}
				break;
			case ASC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 682;
				ascfunc();
				}
				break;
			case SCRN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 683;
				scrnfunc();
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 11);
				{
				State = 684;
				midfunc();
				}
				break;
			case PDL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 685;
				pdlfunc();
				}
				break;
			case PEEK:
				EnterOuterAlt(_localctx, 13);
				{
				State = 686;
				peekfunc();
				}
				break;
			case INTF:
				EnterOuterAlt(_localctx, 14);
				{
				State = 687;
				intfunc();
				}
				break;
			case SPC:
				EnterOuterAlt(_localctx, 15);
				{
				State = 688;
				spcfunc();
				}
				break;
			case FRE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 689;
				frefunc();
				}
				break;
			case POS:
				EnterOuterAlt(_localctx, 17);
				{
				State = 690;
				posfunc();
				}
				break;
			case USR:
				EnterOuterAlt(_localctx, 18);
				{
				State = 691;
				usrfunc();
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 692;
				leftfunc();
				}
				break;
			case VAL:
				EnterOuterAlt(_localctx, 20);
				{
				State = 693;
				valfunc();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 21);
				{
				State = 694;
				rightfunc();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 22);
				{
				State = 695;
				fnfunc();
				}
				break;
			case SIN:
				EnterOuterAlt(_localctx, 23);
				{
				State = 696;
				sinfunc();
				}
				break;
			case COS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 697;
				cosfunc();
				}
				break;
			case TAN:
				EnterOuterAlt(_localctx, 25);
				{
				State = 698;
				tanfunc();
				}
				break;
			case ATN:
				EnterOuterAlt(_localctx, 26);
				{
				State = 699;
				atnfunc();
				}
				break;
			case RND:
				EnterOuterAlt(_localctx, 27);
				{
				State = 700;
				rndfunc();
				}
				break;
			case SGN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 701;
				sgnfunc();
				}
				break;
			case EXP:
				EnterOuterAlt(_localctx, 29);
				{
				State = 702;
				expfunc();
				}
				break;
			case LOG:
				EnterOuterAlt(_localctx, 30);
				{
				State = 703;
				logfunc();
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 31);
				{
				State = 704;
				absfunc();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 32);
				{
				State = 705;
				Match(LPAREN);
				State = 706;
				expression();
				State = 707;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BasicParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BasicParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BasicParser.MINUS, 0); }
		public SignExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignExpressionContext signExpression() {
		SignExpressionContext _localctx = new SignExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_signExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 711;
				Match(NOT);
				}
			}

			State = 715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 714;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 717;
			func_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignExpressionContext[] signExpression() {
			return GetRuleContexts<SignExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExpressionContext signExpression(int i) {
			return GetRuleContext<SignExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPONENT() { return GetTokens(BasicParser.EXPONENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPONENT(int i) {
			return GetToken(BasicParser.EXPONENT, i);
		}
		public ExponentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExponentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExponentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExponentExpressionContext exponentExpression() {
		ExponentExpressionContext _localctx = new ExponentExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_exponentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			signExpression();
			State = 724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPONENT) {
				{
				{
				State = 720;
				Match(EXPONENT);
				State = 721;
				signExpression();
				}
				}
				State = 726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExponentExpressionContext[] exponentExpression() {
			return GetRuleContexts<ExponentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentExpressionContext exponentExpression(int i) {
			return GetRuleContext<ExponentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(BasicParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(BasicParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(BasicParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(BasicParser.DIV, i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterMultiplyingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitMultiplyingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_multiplyingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			exponentExpression();
			State = 732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIV) {
				{
				{
				State = 728;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 729;
				exponentExpression();
				}
				}
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(BasicParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(BasicParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(BasicParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(BasicParser.MINUS, i);
		}
		public AddingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAddingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAddingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddingExpressionContext addingExpression() {
		AddingExpressionContext _localctx = new AddingExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_addingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			multiplyingExpression();
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 736;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 737;
				multiplyingExpression();
				}
				}
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddingExpressionContext[] addingExpression() {
			return GetRuleContexts<AddingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddingExpressionContext addingExpression(int i) {
			return GetRuleContext<AddingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			addingExpression();
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4420796416L) != 0)) {
				{
				State = 744;
				relop();
				State = 745;
				addingExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(BasicParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(BasicParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(BasicParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(BasicParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_expression);
		int _la;
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				func_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				relationalExpression();
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AND || _la==OR) {
					{
					{
					State = 751;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 752;
					relationalExpression();
					}
					}
					State = 757;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarnameContext varname() {
			return GetRuleContext<VarnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarsuffixContext varsuffix() {
			return GetRuleContext<VarsuffixContext>(0);
		}
		public Var_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_Context var_() {
		Var_Context _localctx = new Var_Context(Context, State);
		EnterRule(_localctx, 136, RULE_var_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			varname();
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLLAR || _la==PERCENT) {
				{
				State = 761;
				varsuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTERS() { return GetTokens(BasicParser.LETTERS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTERS(int i) {
			return GetToken(BasicParser.LETTERS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(BasicParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(BasicParser.NUMBER, i);
		}
		public VarnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVarname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVarname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarnameContext varname() {
		VarnameContext _localctx = new VarnameContext(Context, State);
		EnterRule(_localctx, 138, RULE_varname);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(LETTERS);
			State = 768;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 765;
					_la = TokenStream.LA(1);
					if ( !(_la==LETTERS || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 770;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(BasicParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BasicParser.PERCENT, 0); }
		public VarsuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVarsuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVarsuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsuffixContext varsuffix() {
		VarsuffixContext _localctx = new VarsuffixContext(Context, State);
		EnterRule(_localctx, 140, RULE_varsuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			_la = TokenStream.LA(1);
			if ( !(_la==DOLLAR || _la==PERCENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext[] vardecl() {
			return GetRuleContexts<VardeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardeclContext vardecl(int i) {
			return GetRuleContext<VardeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 142, RULE_varlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			vardecl();
			State = 778;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 774;
					Match(COMMA);
					State = 775;
					vardecl();
					}
					} 
				}
				State = 780;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 144, RULE_exprlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			expression();
			State = 786;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 782;
					Match(COMMA);
					State = 783;
					expression();
					}
					} 
				}
				State = 788;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQR() { return GetToken(BasicParser.SQR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SqrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSqrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSqrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqrfuncContext sqrfunc() {
		SqrfuncContext _localctx = new SqrfuncContext(Context, State);
		EnterRule(_localctx, 146, RULE_sqrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			Match(SQR);
			State = 790;
			Match(LPAREN);
			State = 791;
			expression();
			State = 792;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(BasicParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ChrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitChrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChrfuncContext chrfunc() {
		ChrfuncContext _localctx = new ChrfuncContext(Context, State);
		EnterRule(_localctx, 148, RULE_chrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(CHR);
			State = 795;
			Match(LPAREN);
			State = 796;
			expression();
			State = 797;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LenfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(BasicParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public LenfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lenfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLenfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LenfuncContext lenfunc() {
		LenfuncContext _localctx = new LenfuncContext(Context, State);
		EnterRule(_localctx, 150, RULE_lenfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			Match(LEN);
			State = 800;
			Match(LPAREN);
			State = 801;
			expression();
			State = 802;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BasicParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public AscfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAscfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscfuncContext ascfunc() {
		AscfuncContext _localctx = new AscfuncContext(Context, State);
		EnterRule(_localctx, 152, RULE_ascfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(ASC);
			State = 805;
			Match(LPAREN);
			State = 806;
			expression();
			State = 807;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(BasicParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BasicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BasicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public MidfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitMidfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidfuncContext midfunc() {
		MidfuncContext _localctx = new MidfuncContext(Context, State);
		EnterRule(_localctx, 154, RULE_midfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			Match(MID);
			State = 810;
			Match(LPAREN);
			State = 811;
			expression();
			State = 812;
			Match(COMMA);
			State = 813;
			expression();
			State = 814;
			Match(COMMA);
			State = 815;
			expression();
			State = 816;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PdlfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDL() { return GetToken(BasicParser.PDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public PdlfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pdlfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPdlfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPdlfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPdlfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PdlfuncContext pdlfunc() {
		PdlfuncContext _localctx = new PdlfuncContext(Context, State);
		EnterRule(_localctx, 156, RULE_pdlfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(PDL);
			State = 819;
			Match(LPAREN);
			State = 820;
			expression();
			State = 821;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(BasicParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public PeekfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeekfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeekfuncContext peekfunc() {
		PeekfuncContext _localctx = new PeekfuncContext(Context, State);
		EnterRule(_localctx, 158, RULE_peekfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(PEEK);
			State = 824;
			Match(LPAREN);
			State = 825;
			expression();
			State = 826;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTF() { return GetToken(BasicParser.INTF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public IntfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIntfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntfuncContext intfunc() {
		IntfuncContext _localctx = new IntfuncContext(Context, State);
		EnterRule(_localctx, 160, RULE_intfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			Match(INTF);
			State = 829;
			Match(LPAREN);
			State = 830;
			expression();
			State = 831;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPC() { return GetToken(BasicParser.SPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SpcfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSpcfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSpcfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcfuncContext spcfunc() {
		SpcfuncContext _localctx = new SpcfuncContext(Context, State);
		EnterRule(_localctx, 162, RULE_spcfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(SPC);
			State = 834;
			Match(LPAREN);
			State = 835;
			expression();
			State = 836;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrefuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRE() { return GetToken(BasicParser.FRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public FrefuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frefunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterFrefunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitFrefunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrefunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrefuncContext frefunc() {
		FrefuncContext _localctx = new FrefuncContext(Context, State);
		EnterRule(_localctx, 164, RULE_frefunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			Match(FRE);
			State = 839;
			Match(LPAREN);
			State = 840;
			expression();
			State = 841;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS() { return GetToken(BasicParser.POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public PosfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PosfuncContext posfunc() {
		PosfuncContext _localctx = new PosfuncContext(Context, State);
		EnterRule(_localctx, 166, RULE_posfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			Match(POS);
			State = 844;
			Match(LPAREN);
			State = 845;
			expression();
			State = 846;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USR() { return GetToken(BasicParser.USR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public UsrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usrfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitUsrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsrfuncContext usrfunc() {
		UsrfuncContext _localctx = new UsrfuncContext(Context, State);
		EnterRule(_localctx, 168, RULE_usrfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			Match(USR);
			State = 849;
			Match(LPAREN);
			State = 850;
			expression();
			State = 851;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BasicParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public LeftfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLeftfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftfuncContext leftfunc() {
		LeftfuncContext _localctx = new LeftfuncContext(Context, State);
		EnterRule(_localctx, 170, RULE_leftfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			Match(LEFT);
			State = 854;
			Match(LPAREN);
			State = 855;
			expression();
			State = 856;
			Match(COMMA);
			State = 857;
			expression();
			State = 858;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BasicParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public RightfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRightfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightfuncContext rightfunc() {
		RightfuncContext _localctx = new RightfuncContext(Context, State);
		EnterRule(_localctx, 172, RULE_rightfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			Match(RIGHT);
			State = 861;
			Match(LPAREN);
			State = 862;
			expression();
			State = 863;
			Match(COMMA);
			State = 864;
			expression();
			State = 865;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(BasicParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public StrfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStrfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrfuncContext strfunc() {
		StrfuncContext _localctx = new StrfuncContext(Context, State);
		EnterRule(_localctx, 174, RULE_strfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(STR);
			State = 868;
			Match(LPAREN);
			State = 869;
			expression();
			State = 870;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(BasicParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public FnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterFnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitFnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnfuncContext fnfunc() {
		FnfuncContext _localctx = new FnfuncContext(Context, State);
		EnterRule(_localctx, 176, RULE_fnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(FN);
			State = 873;
			var_();
			State = 874;
			Match(LPAREN);
			State = 875;
			expression();
			State = 876;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(BasicParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ValfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitValfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValfuncContext valfunc() {
		ValfuncContext _localctx = new ValfuncContext(Context, State);
		EnterRule(_localctx, 178, RULE_valfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(VAL);
			State = 879;
			Match(LPAREN);
			State = 880;
			expression();
			State = 881;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScrnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRN() { return GetToken(BasicParser.SCRN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BasicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ScrnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scrnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterScrnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitScrnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScrnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScrnfuncContext scrnfunc() {
		ScrnfuncContext _localctx = new ScrnfuncContext(Context, State);
		EnterRule(_localctx, 180, RULE_scrnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(SCRN);
			State = 884;
			Match(LPAREN);
			State = 885;
			expression();
			State = 886;
			Match(COMMA);
			State = 887;
			expression();
			State = 888;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(BasicParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SinfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSinfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinfuncContext sinfunc() {
		SinfuncContext _localctx = new SinfuncContext(Context, State);
		EnterRule(_localctx, 182, RULE_sinfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			Match(SIN);
			State = 891;
			Match(LPAREN);
			State = 892;
			expression();
			State = 893;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(BasicParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public CosfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterCosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitCosfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CosfuncContext cosfunc() {
		CosfuncContext _localctx = new CosfuncContext(Context, State);
		EnterRule(_localctx, 184, RULE_cosfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 895;
			Match(COS);
			State = 896;
			Match(LPAREN);
			State = 897;
			expression();
			State = 898;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(BasicParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public TanfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tanfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterTanfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitTanfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTanfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TanfuncContext tanfunc() {
		TanfuncContext _localctx = new TanfuncContext(Context, State);
		EnterRule(_localctx, 186, RULE_tanfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			Match(TAN);
			State = 901;
			Match(LPAREN);
			State = 902;
			expression();
			State = 903;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATN() { return GetToken(BasicParser.ATN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public AtnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAtnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAtnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtnfuncContext atnfunc() {
		AtnfuncContext _localctx = new AtnfuncContext(Context, State);
		EnterRule(_localctx, 188, RULE_atnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(ATN);
			State = 906;
			Match(LPAREN);
			State = 907;
			expression();
			State = 908;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RndfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RND() { return GetToken(BasicParser.RND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public RndfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rndfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitRndfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRndfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RndfuncContext rndfunc() {
		RndfuncContext _localctx = new RndfuncContext(Context, State);
		EnterRule(_localctx, 190, RULE_rndfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			Match(RND);
			State = 911;
			Match(LPAREN);
			State = 912;
			expression();
			State = 913;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SgnfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SGN() { return GetToken(BasicParser.SGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public SgnfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sgnfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitSgnfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSgnfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SgnfuncContext sgnfunc() {
		SgnfuncContext _localctx = new SgnfuncContext(Context, State);
		EnterRule(_localctx, 192, RULE_sgnfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(SGN);
			State = 916;
			Match(LPAREN);
			State = 917;
			expression();
			State = 918;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(BasicParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public ExpfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpfuncContext expfunc() {
		ExpfuncContext _localctx = new ExpfuncContext(Context, State);
		EnterRule(_localctx, 194, RULE_expfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(EXP);
			State = 921;
			Match(LPAREN);
			State = 922;
			expression();
			State = 923;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(BasicParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public LogfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterLogfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitLogfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogfuncContext logfunc() {
		LogfuncContext _localctx = new LogfuncContext(Context, State);
		EnterRule(_localctx, 196, RULE_logfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(LOG);
			State = 926;
			Match(LPAREN);
			State = 927;
			expression();
			State = 928;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(BasicParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public AbsfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAbsfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsfuncContext absfunc() {
		AbsfuncContext _localctx = new AbsfuncContext(Context, State);
		EnterRule(_localctx, 198, RULE_absfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(ABS);
			State = 931;
			Match(LPAREN);
			State = 932;
			expression();
			State = 933;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(BasicParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicParser.RPAREN, 0); }
		public TabfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterTabfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitTabfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabfuncContext tabfunc() {
		TabfuncContext _localctx = new TabfuncContext(Context, State);
		EnterRule(_localctx, 200, RULE_tabfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			Match(TAB);
			State = 936;
			Match(LPAREN);
			State = 937;
			expression();
			State = 938;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,122,941,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,1,0,3,0,204,8,0,1,0,5,0,207,8,0,10,0,12,0,210,9,
		0,1,0,1,0,3,0,214,8,0,1,1,1,1,3,1,218,8,1,1,1,1,1,1,1,3,1,223,8,1,5,1,
		225,8,1,10,1,12,1,228,9,1,1,1,1,1,3,1,232,8,1,1,1,3,1,235,8,1,1,2,3,2,
		238,8,2,1,2,1,2,1,2,3,2,243,8,2,5,2,245,8,2,10,2,12,2,248,9,2,1,2,1,2,
		3,2,252,8,2,1,2,3,2,255,8,2,1,3,1,3,1,4,3,4,260,8,4,1,4,1,4,1,5,3,5,265,
		8,5,1,5,1,5,1,5,5,5,270,8,5,10,5,12,5,273,9,5,1,5,1,5,3,5,277,8,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,344,8,6,1,7,1,7,1,7,
		1,7,1,7,5,7,351,8,7,10,7,12,7,354,9,7,1,8,1,8,3,8,358,8,8,1,9,1,9,1,9,
		1,10,3,10,364,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,386,8,12,1,13,1,13,
		1,13,1,14,1,14,1,14,3,14,394,8,14,1,14,1,14,3,14,398,8,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,3,15,408,8,15,1,15,1,15,1,15,3,15,413,8,15,
		3,15,415,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,425,8,16,1,
		17,1,17,1,17,1,17,5,17,431,8,17,10,17,12,17,434,9,17,3,17,436,8,17,1,18,
		1,18,1,18,3,18,441,8,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
		21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,3,25,470,8,25,1,25,1,25,1,25,1,25,1,25,5,25,477,8,25,
		10,25,12,25,480,9,25,1,26,1,26,1,26,1,26,1,26,3,26,487,8,26,1,26,1,26,
		1,26,1,26,1,26,5,26,494,8,26,10,26,12,26,497,9,26,1,27,1,27,1,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,510,8,28,10,28,12,28,513,9,28,
		1,29,1,29,1,29,1,29,1,29,1,29,5,29,521,8,29,10,29,12,29,524,9,29,1,30,
		1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
		1,34,1,34,1,34,3,34,544,8,34,5,34,546,8,34,10,34,12,34,549,9,34,1,35,1,
		35,3,35,553,8,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,561,8,36,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,3,37,570,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,
		38,3,38,579,8,38,1,39,1,39,3,39,583,8,39,1,39,1,39,1,39,1,39,1,39,1,39,
		1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
		1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,
		1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,
		1,53,1,53,3,53,649,8,53,1,54,1,54,1,54,1,54,1,54,3,54,656,8,54,1,55,1,
		55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,3,60,671,8,60,
		1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,710,8,61,1,62,3,62,713,
		8,62,1,62,3,62,716,8,62,1,62,1,62,1,63,1,63,1,63,5,63,723,8,63,10,63,12,
		63,726,9,63,1,64,1,64,1,64,5,64,731,8,64,10,64,12,64,734,9,64,1,65,1,65,
		1,65,5,65,739,8,65,10,65,12,65,742,9,65,1,66,1,66,1,66,1,66,3,66,748,8,
		66,1,67,1,67,1,67,1,67,5,67,754,8,67,10,67,12,67,757,9,67,3,67,759,8,67,
		1,68,1,68,3,68,763,8,68,1,69,1,69,5,69,767,8,69,10,69,12,69,770,9,69,1,
		70,1,70,1,71,1,71,1,71,5,71,777,8,71,10,71,12,71,780,9,71,1,72,1,72,1,
		72,5,72,785,8,72,10,72,12,72,788,9,72,1,73,1,73,1,73,1,73,1,73,1,74,1,
		74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,
		77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,
		79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,
		81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,
		84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,
		86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,
		89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,
		91,1,91,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,
		94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,97,1,
		97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,
		100,1,100,1,100,1,100,1,100,1,100,0,0,101,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,198,200,0,8,1,0,121,122,2,0,27,27,37,37,1,0,18,
		19,1,0,119,120,1,0,20,21,1,0,73,74,1,0,118,119,1,0,1,2,1003,0,213,1,0,
		0,0,2,215,1,0,0,0,4,237,1,0,0,0,6,256,1,0,0,0,8,259,1,0,0,0,10,276,1,0,
		0,0,12,343,1,0,0,0,14,345,1,0,0,0,16,355,1,0,0,0,18,359,1,0,0,0,20,363,
		1,0,0,0,22,367,1,0,0,0,24,385,1,0,0,0,26,387,1,0,0,0,28,390,1,0,0,0,30,
		399,1,0,0,0,32,416,1,0,0,0,34,426,1,0,0,0,36,437,1,0,0,0,38,444,1,0,0,
		0,40,447,1,0,0,0,42,450,1,0,0,0,44,453,1,0,0,0,46,456,1,0,0,0,48,461,1,
		0,0,0,50,464,1,0,0,0,52,481,1,0,0,0,54,498,1,0,0,0,56,503,1,0,0,0,58,514,
		1,0,0,0,60,525,1,0,0,0,62,528,1,0,0,0,64,531,1,0,0,0,66,535,1,0,0,0,68,
		539,1,0,0,0,70,552,1,0,0,0,72,554,1,0,0,0,74,562,1,0,0,0,76,571,1,0,0,
		0,78,580,1,0,0,0,80,591,1,0,0,0,82,596,1,0,0,0,84,600,1,0,0,0,86,604,1,
		0,0,0,88,608,1,0,0,0,90,612,1,0,0,0,92,616,1,0,0,0,94,623,1,0,0,0,96,630,
		1,0,0,0,98,634,1,0,0,0,100,637,1,0,0,0,102,640,1,0,0,0,104,643,1,0,0,0,
		106,646,1,0,0,0,108,650,1,0,0,0,110,657,1,0,0,0,112,660,1,0,0,0,114,663,
		1,0,0,0,116,665,1,0,0,0,118,667,1,0,0,0,120,670,1,0,0,0,122,709,1,0,0,
		0,124,712,1,0,0,0,126,719,1,0,0,0,128,727,1,0,0,0,130,735,1,0,0,0,132,
		743,1,0,0,0,134,758,1,0,0,0,136,760,1,0,0,0,138,764,1,0,0,0,140,771,1,
		0,0,0,142,773,1,0,0,0,144,781,1,0,0,0,146,789,1,0,0,0,148,794,1,0,0,0,
		150,799,1,0,0,0,152,804,1,0,0,0,154,809,1,0,0,0,156,818,1,0,0,0,158,823,
		1,0,0,0,160,828,1,0,0,0,162,833,1,0,0,0,164,838,1,0,0,0,166,843,1,0,0,
		0,168,848,1,0,0,0,170,853,1,0,0,0,172,860,1,0,0,0,174,867,1,0,0,0,176,
		872,1,0,0,0,178,878,1,0,0,0,180,883,1,0,0,0,182,890,1,0,0,0,184,895,1,
		0,0,0,186,900,1,0,0,0,188,905,1,0,0,0,190,910,1,0,0,0,192,915,1,0,0,0,
		194,920,1,0,0,0,196,925,1,0,0,0,198,930,1,0,0,0,200,935,1,0,0,0,202,204,
		3,4,2,0,203,202,1,0,0,0,203,204,1,0,0,0,204,208,1,0,0,0,205,207,3,2,1,
		0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,
		211,1,0,0,0,210,208,1,0,0,0,211,214,5,0,0,1,212,214,5,0,0,1,213,203,1,
		0,0,0,213,212,1,0,0,0,214,1,1,0,0,0,215,217,3,8,4,0,216,218,5,122,0,0,
		217,216,1,0,0,0,217,218,1,0,0,0,218,231,1,0,0,0,219,226,3,10,5,0,220,222,
		5,40,0,0,221,223,3,10,5,0,222,221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,
		0,0,224,220,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,
		232,1,0,0,0,228,226,1,0,0,0,229,232,5,116,0,0,230,232,5,10,0,0,231,219,
		1,0,0,0,231,229,1,0,0,0,231,230,1,0,0,0,232,234,1,0,0,0,233,235,5,122,
		0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,3,1,0,0,0,236,238,5,122,0,0,237,
		236,1,0,0,0,237,238,1,0,0,0,238,251,1,0,0,0,239,246,3,10,5,0,240,242,5,
		40,0,0,241,243,3,10,5,0,242,241,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,
		0,244,240,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,
		252,1,0,0,0,248,246,1,0,0,0,249,252,5,116,0,0,250,252,5,10,0,0,251,239,
		1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,0,252,254,1,0,0,0,253,255,5,122,
		0,0,254,253,1,0,0,0,254,255,1,0,0,0,255,5,1,0,0,0,256,257,5,108,0,0,257,
		7,1,0,0,0,258,260,7,0,0,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,
		0,0,261,262,5,119,0,0,262,9,1,0,0,0,263,265,3,6,3,0,264,263,1,0,0,0,264,
		265,1,0,0,0,265,266,1,0,0,0,266,271,3,12,6,0,267,268,5,27,0,0,268,270,
		3,12,6,0,269,267,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,
		0,272,277,1,0,0,0,273,271,1,0,0,0,274,277,5,116,0,0,275,277,5,10,0,0,276,
		264,1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,11,1,0,0,0,278,344,5,115,
		0,0,279,344,5,113,0,0,280,344,5,112,0,0,281,344,5,71,0,0,282,344,5,72,
		0,0,283,344,5,63,0,0,284,344,5,64,0,0,285,344,5,109,0,0,286,344,5,65,0,
		0,287,344,5,94,0,0,288,344,5,22,0,0,289,344,5,29,0,0,290,344,5,60,0,0,
		291,344,5,41,0,0,292,344,5,53,0,0,293,344,5,42,0,0,294,344,5,43,0,0,295,
		344,3,114,57,0,296,344,3,116,58,0,297,344,3,118,59,0,298,344,3,110,55,
		0,299,344,3,108,54,0,300,344,3,106,53,0,301,344,3,102,51,0,302,344,3,18,
		9,0,303,344,3,104,52,0,304,344,3,34,17,0,305,344,3,100,50,0,306,344,3,
		98,49,0,307,344,3,96,48,0,308,344,3,92,46,0,309,344,3,94,47,0,310,344,
		3,88,44,0,311,344,3,82,41,0,312,344,3,86,43,0,313,344,3,84,42,0,314,344,
		3,90,45,0,315,344,3,64,32,0,316,344,3,66,33,0,317,344,3,16,8,0,318,344,
		3,46,23,0,319,344,3,54,27,0,320,344,3,56,28,0,321,344,3,58,29,0,322,344,
		3,28,14,0,323,344,3,30,15,0,324,344,3,32,16,0,325,344,3,36,18,0,326,344,
		3,80,40,0,327,344,3,40,20,0,328,344,3,42,21,0,329,344,3,44,22,0,330,344,
		3,48,24,0,331,344,3,38,19,0,332,344,3,50,25,0,333,344,3,52,26,0,334,344,
		3,60,30,0,335,344,3,62,31,0,336,344,3,72,36,0,337,344,3,68,34,0,338,344,
		3,74,37,0,339,344,3,76,38,0,340,344,3,78,39,0,341,344,3,20,10,0,342,344,
		3,112,56,0,343,278,1,0,0,0,343,279,1,0,0,0,343,280,1,0,0,0,343,281,1,0,
		0,0,343,282,1,0,0,0,343,283,1,0,0,0,343,284,1,0,0,0,343,285,1,0,0,0,343,
		286,1,0,0,0,343,287,1,0,0,0,343,288,1,0,0,0,343,289,1,0,0,0,343,290,1,
		0,0,0,343,291,1,0,0,0,343,292,1,0,0,0,343,293,1,0,0,0,343,294,1,0,0,0,
		343,295,1,0,0,0,343,296,1,0,0,0,343,297,1,0,0,0,343,298,1,0,0,0,343,299,
		1,0,0,0,343,300,1,0,0,0,343,301,1,0,0,0,343,302,1,0,0,0,343,303,1,0,0,
		0,343,304,1,0,0,0,343,305,1,0,0,0,343,306,1,0,0,0,343,307,1,0,0,0,343,
		308,1,0,0,0,343,309,1,0,0,0,343,310,1,0,0,0,343,311,1,0,0,0,343,312,1,
		0,0,0,343,313,1,0,0,0,343,314,1,0,0,0,343,315,1,0,0,0,343,316,1,0,0,0,
		343,317,1,0,0,0,343,318,1,0,0,0,343,319,1,0,0,0,343,320,1,0,0,0,343,321,
		1,0,0,0,343,322,1,0,0,0,343,323,1,0,0,0,343,324,1,0,0,0,343,325,1,0,0,
		0,343,326,1,0,0,0,343,327,1,0,0,0,343,328,1,0,0,0,343,329,1,0,0,0,343,
		330,1,0,0,0,343,331,1,0,0,0,343,332,1,0,0,0,343,333,1,0,0,0,343,334,1,
		0,0,0,343,335,1,0,0,0,343,336,1,0,0,0,343,337,1,0,0,0,343,338,1,0,0,0,
		343,339,1,0,0,0,343,340,1,0,0,0,343,341,1,0,0,0,343,342,1,0,0,0,344,13,
		1,0,0,0,345,352,3,136,68,0,346,347,5,16,0,0,347,348,3,144,72,0,348,349,
		5,17,0,0,349,351,1,0,0,0,350,346,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,
		0,352,353,1,0,0,0,353,15,1,0,0,0,354,352,1,0,0,0,355,357,5,4,0,0,356,358,
		3,144,72,0,357,356,1,0,0,0,357,358,1,0,0,0,358,17,1,0,0,0,359,360,5,106,
		0,0,360,361,3,144,72,0,361,19,1,0,0,0,362,364,5,31,0,0,363,362,1,0,0,0,
		363,364,1,0,0,0,364,365,1,0,0,0,365,366,3,22,11,0,366,21,1,0,0,0,367,368,
		3,14,7,0,368,369,5,32,0,0,369,370,3,144,72,0,370,23,1,0,0,0,371,386,5,
		23,0,0,372,373,5,25,0,0,373,386,5,32,0,0,374,375,5,32,0,0,375,386,5,25,
		0,0,376,386,5,24,0,0,377,378,5,26,0,0,378,386,5,32,0,0,379,380,5,32,0,
		0,380,386,5,26,0,0,381,386,3,26,13,0,382,386,5,32,0,0,383,386,5,25,0,0,
		384,386,5,26,0,0,385,371,1,0,0,0,385,372,1,0,0,0,385,374,1,0,0,0,385,376,
		1,0,0,0,385,377,1,0,0,0,385,379,1,0,0,0,385,381,1,0,0,0,385,382,1,0,0,
		0,385,383,1,0,0,0,385,384,1,0,0,0,386,25,1,0,0,0,387,388,5,26,0,0,388,
		389,5,25,0,0,389,27,1,0,0,0,390,391,5,7,0,0,391,393,3,134,67,0,392,394,
		5,9,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,397,1,0,0,0,395,398,3,12,6,
		0,396,398,3,8,4,0,397,395,1,0,0,0,397,396,1,0,0,0,398,29,1,0,0,0,399,400,
		5,33,0,0,400,401,3,14,7,0,401,402,5,32,0,0,402,403,3,134,67,0,403,404,
		5,34,0,0,404,407,3,134,67,0,405,406,5,35,0,0,406,408,3,134,67,0,407,405,
		1,0,0,0,407,408,1,0,0,0,408,414,1,0,0,0,409,410,3,12,6,0,410,412,5,8,0,
		0,411,413,3,14,7,0,412,411,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,
		409,1,0,0,0,414,415,1,0,0,0,415,31,1,0,0,0,416,417,5,33,0,0,417,418,3,
		14,7,0,418,419,5,32,0,0,419,420,3,134,67,0,420,421,5,34,0,0,421,424,3,
		134,67,0,422,423,5,35,0,0,423,425,3,134,67,0,424,422,1,0,0,0,424,425,1,
		0,0,0,425,33,1,0,0,0,426,435,5,8,0,0,427,432,3,14,7,0,428,429,5,27,0,0,
		429,431,3,14,7,0,430,428,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,
		1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,435,427,1,0,0,0,435,436,1,0,0,
		0,436,35,1,0,0,0,437,440,5,36,0,0,438,439,5,117,0,0,439,441,7,1,0,0,440,
		438,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,3,142,71,0,443,37,
		1,0,0,0,444,445,5,77,0,0,445,446,3,142,71,0,446,39,1,0,0,0,447,448,5,38,
		0,0,448,449,3,142,71,0,449,41,1,0,0,0,450,451,5,5,0,0,451,452,3,8,4,0,
		452,43,1,0,0,0,453,454,5,6,0,0,454,455,3,134,67,0,455,45,1,0,0,0,456,457,
		5,58,0,0,457,458,3,134,67,0,458,459,5,27,0,0,459,460,3,134,67,0,460,47,
		1,0,0,0,461,462,5,45,0,0,462,463,3,144,72,0,463,49,1,0,0,0,464,469,5,47,
		0,0,465,466,3,134,67,0,466,467,5,27,0,0,467,468,3,134,67,0,468,470,1,0,
		0,0,469,465,1,0,0,0,469,470,1,0,0,0,470,478,1,0,0,0,471,472,5,34,0,0,472,
		473,3,134,67,0,473,474,5,27,0,0,474,475,3,134,67,0,475,477,1,0,0,0,476,
		471,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,51,1,0,
		0,0,480,478,1,0,0,0,481,486,5,48,0,0,482,483,3,134,67,0,483,484,5,27,0,
		0,484,485,3,134,67,0,485,487,1,0,0,0,486,482,1,0,0,0,486,487,1,0,0,0,487,
		495,1,0,0,0,488,489,5,34,0,0,489,490,3,134,67,0,490,491,5,27,0,0,491,492,
		3,134,67,0,492,494,1,0,0,0,493,488,1,0,0,0,494,497,1,0,0,0,495,493,1,0,
		0,0,495,496,1,0,0,0,496,53,1,0,0,0,497,495,1,0,0,0,498,499,5,56,0,0,499,
		500,3,134,67,0,500,501,5,27,0,0,501,502,3,134,67,0,502,55,1,0,0,0,503,
		504,5,54,0,0,504,505,3,134,67,0,505,506,5,5,0,0,506,511,3,8,4,0,507,508,
		5,27,0,0,508,510,3,8,4,0,509,507,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,
		0,511,512,1,0,0,0,512,57,1,0,0,0,513,511,1,0,0,0,514,515,5,54,0,0,515,
		516,3,134,67,0,516,517,5,6,0,0,517,522,3,8,4,0,518,519,5,27,0,0,519,521,
		3,8,4,0,520,518,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,
		0,523,59,1,0,0,0,524,522,1,0,0,0,525,526,5,51,0,0,526,527,3,134,67,0,527,
		61,1,0,0,0,528,529,5,52,0,0,529,530,3,134,67,0,530,63,1,0,0,0,531,532,
		5,61,0,0,532,533,5,40,0,0,533,534,3,134,67,0,534,65,1,0,0,0,535,536,5,
		62,0,0,536,537,5,40,0,0,537,538,3,134,67,0,538,67,1,0,0,0,539,540,5,75,
		0,0,540,547,3,70,35,0,541,543,5,27,0,0,542,544,3,70,35,0,543,542,1,0,0,
		0,543,544,1,0,0,0,544,546,1,0,0,0,545,541,1,0,0,0,546,549,1,0,0,0,547,
		545,1,0,0,0,547,548,1,0,0,0,548,69,1,0,0,0,549,547,1,0,0,0,550,553,3,120,
		60,0,551,553,5,117,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,71,1,0,0,0,
		554,555,5,76,0,0,555,556,3,134,67,0,556,557,5,27,0,0,557,560,3,134,67,
		0,558,559,5,27,0,0,559,561,3,134,67,0,560,558,1,0,0,0,560,561,1,0,0,0,
		561,73,1,0,0,0,562,563,5,78,0,0,563,569,3,134,67,0,564,565,5,80,0,0,565,
		566,3,134,67,0,566,567,5,27,0,0,567,568,3,134,67,0,568,570,1,0,0,0,569,
		564,1,0,0,0,569,570,1,0,0,0,570,75,1,0,0,0,571,572,5,79,0,0,572,578,3,
		134,67,0,573,574,5,80,0,0,574,575,3,134,67,0,575,576,5,27,0,0,576,577,
		3,134,67,0,577,579,1,0,0,0,578,573,1,0,0,0,578,579,1,0,0,0,579,77,1,0,
		0,0,580,582,5,81,0,0,581,583,5,82,0,0,582,581,1,0,0,0,582,583,1,0,0,0,
		583,584,1,0,0,0,584,585,3,136,68,0,585,586,5,16,0,0,586,587,3,136,68,0,
		587,588,5,17,0,0,588,589,5,32,0,0,589,590,3,134,67,0,590,79,1,0,0,0,591,
		592,5,84,0,0,592,593,5,16,0,0,593,594,3,134,67,0,594,595,5,17,0,0,595,
		81,1,0,0,0,596,597,5,85,0,0,597,598,5,32,0,0,598,599,3,134,67,0,599,83,
		1,0,0,0,600,601,5,86,0,0,601,602,5,32,0,0,602,603,3,134,67,0,603,85,1,
		0,0,0,604,605,5,87,0,0,605,606,5,32,0,0,606,607,3,134,67,0,607,87,1,0,
		0,0,608,609,5,88,0,0,609,610,5,32,0,0,610,611,3,134,67,0,611,89,1,0,0,
		0,612,613,5,89,0,0,613,614,5,32,0,0,614,615,3,134,67,0,615,91,1,0,0,0,
		616,617,5,90,0,0,617,618,3,134,67,0,618,619,5,27,0,0,619,620,3,134,67,
		0,620,621,5,80,0,0,621,622,3,134,67,0,622,93,1,0,0,0,623,624,5,91,0,0,
		624,625,3,134,67,0,625,626,5,27,0,0,626,627,3,134,67,0,627,628,5,80,0,
		0,628,629,3,134,67,0,629,95,1,0,0,0,630,631,5,66,0,0,631,632,5,5,0,0,632,
		633,3,8,4,0,633,97,1,0,0,0,634,635,5,49,0,0,635,636,5,119,0,0,636,99,1,
		0,0,0,637,638,5,50,0,0,638,639,5,119,0,0,639,101,1,0,0,0,640,641,5,104,
		0,0,641,642,3,14,7,0,642,103,1,0,0,0,643,644,5,105,0,0,644,645,3,14,7,
		0,645,105,1,0,0,0,646,648,5,28,0,0,647,649,3,134,67,0,648,647,1,0,0,0,
		648,649,1,0,0,0,649,107,1,0,0,0,650,655,5,93,0,0,651,652,3,134,67,0,652,
		653,5,27,0,0,653,654,3,134,67,0,654,656,1,0,0,0,655,651,1,0,0,0,655,656,
		1,0,0,0,656,109,1,0,0,0,657,658,5,108,0,0,658,659,3,134,67,0,659,111,1,
		0,0,0,660,661,5,114,0,0,661,662,3,134,67,0,662,113,1,0,0,0,663,664,5,30,
		0,0,664,115,1,0,0,0,665,666,5,3,0,0,666,117,1,0,0,0,667,668,5,111,0,0,
		668,119,1,0,0,0,669,671,7,2,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,672,
		1,0,0,0,672,673,7,3,0,0,673,121,1,0,0,0,674,710,5,117,0,0,675,710,3,120,
		60,0,676,710,3,200,100,0,677,710,3,14,7,0,678,710,3,148,74,0,679,710,3,
		146,73,0,680,710,3,150,75,0,681,710,3,174,87,0,682,710,3,152,76,0,683,
		710,3,180,90,0,684,710,3,154,77,0,685,710,3,156,78,0,686,710,3,158,79,
		0,687,710,3,160,80,0,688,710,3,162,81,0,689,710,3,164,82,0,690,710,3,166,
		83,0,691,710,3,168,84,0,692,710,3,170,85,0,693,710,3,178,89,0,694,710,
		3,172,86,0,695,710,3,176,88,0,696,710,3,182,91,0,697,710,3,184,92,0,698,
		710,3,186,93,0,699,710,3,188,94,0,700,710,3,190,95,0,701,710,3,192,96,
		0,702,710,3,194,97,0,703,710,3,196,98,0,704,710,3,198,99,0,705,706,5,16,
		0,0,706,707,3,134,67,0,707,708,5,17,0,0,708,710,1,0,0,0,709,674,1,0,0,
		0,709,675,1,0,0,0,709,676,1,0,0,0,709,677,1,0,0,0,709,678,1,0,0,0,709,
		679,1,0,0,0,709,680,1,0,0,0,709,681,1,0,0,0,709,682,1,0,0,0,709,683,1,
		0,0,0,709,684,1,0,0,0,709,685,1,0,0,0,709,686,1,0,0,0,709,687,1,0,0,0,
		709,688,1,0,0,0,709,689,1,0,0,0,709,690,1,0,0,0,709,691,1,0,0,0,709,692,
		1,0,0,0,709,693,1,0,0,0,709,694,1,0,0,0,709,695,1,0,0,0,709,696,1,0,0,
		0,709,697,1,0,0,0,709,698,1,0,0,0,709,699,1,0,0,0,709,700,1,0,0,0,709,
		701,1,0,0,0,709,702,1,0,0,0,709,703,1,0,0,0,709,704,1,0,0,0,709,705,1,
		0,0,0,710,123,1,0,0,0,711,713,5,110,0,0,712,711,1,0,0,0,712,713,1,0,0,
		0,713,715,1,0,0,0,714,716,7,2,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,
		717,1,0,0,0,717,718,3,122,61,0,718,125,1,0,0,0,719,724,3,124,62,0,720,
		721,5,107,0,0,721,723,3,124,62,0,722,720,1,0,0,0,723,726,1,0,0,0,724,722,
		1,0,0,0,724,725,1,0,0,0,725,127,1,0,0,0,726,724,1,0,0,0,727,732,3,126,
		63,0,728,729,7,4,0,0,729,731,3,126,63,0,730,728,1,0,0,0,731,734,1,0,0,
		0,732,730,1,0,0,0,732,733,1,0,0,0,733,129,1,0,0,0,734,732,1,0,0,0,735,
		740,3,128,64,0,736,737,7,2,0,0,737,739,3,128,64,0,738,736,1,0,0,0,739,
		742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,131,1,0,0,0,742,740,1,
		0,0,0,743,747,3,130,65,0,744,745,3,24,12,0,745,746,3,130,65,0,746,748,
		1,0,0,0,747,744,1,0,0,0,747,748,1,0,0,0,748,133,1,0,0,0,749,759,3,122,
		61,0,750,755,3,132,66,0,751,752,7,5,0,0,752,754,3,132,66,0,753,751,1,0,
		0,0,754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,759,1,0,0,0,757,
		755,1,0,0,0,758,749,1,0,0,0,758,750,1,0,0,0,759,135,1,0,0,0,760,762,3,
		138,69,0,761,763,3,140,70,0,762,761,1,0,0,0,762,763,1,0,0,0,763,137,1,
		0,0,0,764,768,5,118,0,0,765,767,7,6,0,0,766,765,1,0,0,0,767,770,1,0,0,
		0,768,766,1,0,0,0,768,769,1,0,0,0,769,139,1,0,0,0,770,768,1,0,0,0,771,
		772,7,7,0,0,772,141,1,0,0,0,773,778,3,14,7,0,774,775,5,27,0,0,775,777,
		3,14,7,0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,
		0,779,143,1,0,0,0,780,778,1,0,0,0,781,786,3,134,67,0,782,783,5,27,0,0,
		783,785,3,134,67,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,
		787,1,0,0,0,787,145,1,0,0,0,788,786,1,0,0,0,789,790,5,39,0,0,790,791,5,
		16,0,0,791,792,3,134,67,0,792,793,5,17,0,0,793,147,1,0,0,0,794,795,5,11,
		0,0,795,796,5,16,0,0,796,797,3,134,67,0,797,798,5,17,0,0,798,149,1,0,0,
		0,799,800,5,44,0,0,800,801,5,16,0,0,801,802,3,134,67,0,802,803,5,17,0,
		0,803,151,1,0,0,0,804,805,5,46,0,0,805,806,5,16,0,0,806,807,3,134,67,0,
		807,808,5,17,0,0,808,153,1,0,0,0,809,810,5,12,0,0,810,811,5,16,0,0,811,
		812,3,134,67,0,812,813,5,27,0,0,813,814,3,134,67,0,814,815,5,27,0,0,815,
		816,3,134,67,0,816,817,5,17,0,0,817,155,1,0,0,0,818,819,5,55,0,0,819,820,
		5,16,0,0,820,821,3,134,67,0,821,822,5,17,0,0,822,157,1,0,0,0,823,824,5,
		57,0,0,824,825,5,16,0,0,825,826,3,134,67,0,826,827,5,17,0,0,827,159,1,
		0,0,0,828,829,5,59,0,0,829,830,5,16,0,0,830,831,3,134,67,0,831,832,5,17,
		0,0,832,161,1,0,0,0,833,834,5,67,0,0,834,835,5,16,0,0,835,836,3,134,67,
		0,836,837,5,17,0,0,837,163,1,0,0,0,838,839,5,68,0,0,839,840,5,16,0,0,840,
		841,3,134,67,0,841,842,5,17,0,0,842,165,1,0,0,0,843,844,5,69,0,0,844,845,
		5,16,0,0,845,846,3,134,67,0,846,847,5,17,0,0,847,167,1,0,0,0,848,849,5,
		70,0,0,849,850,5,16,0,0,850,851,3,134,67,0,851,852,5,17,0,0,852,169,1,
		0,0,0,853,854,5,13,0,0,854,855,5,16,0,0,855,856,3,134,67,0,856,857,5,27,
		0,0,857,858,3,134,67,0,858,859,5,17,0,0,859,171,1,0,0,0,860,861,5,14,0,
		0,861,862,5,16,0,0,862,863,3,134,67,0,863,864,5,27,0,0,864,865,3,134,67,
		0,865,866,5,17,0,0,866,173,1,0,0,0,867,868,5,15,0,0,868,869,5,16,0,0,869,
		870,3,134,67,0,870,871,5,17,0,0,871,175,1,0,0,0,872,873,5,82,0,0,873,874,
		3,136,68,0,874,875,5,16,0,0,875,876,3,134,67,0,876,877,5,17,0,0,877,177,
		1,0,0,0,878,879,5,83,0,0,879,880,5,16,0,0,880,881,3,134,67,0,881,882,5,
		17,0,0,882,179,1,0,0,0,883,884,5,92,0,0,884,885,5,16,0,0,885,886,3,134,
		67,0,886,887,5,27,0,0,887,888,3,134,67,0,888,889,5,17,0,0,889,181,1,0,
		0,0,890,891,5,95,0,0,891,892,5,16,0,0,892,893,3,134,67,0,893,894,5,17,
		0,0,894,183,1,0,0,0,895,896,5,96,0,0,896,897,5,16,0,0,897,898,3,134,67,
		0,898,899,5,17,0,0,899,185,1,0,0,0,900,901,5,97,0,0,901,902,5,16,0,0,902,
		903,3,134,67,0,903,904,5,17,0,0,904,187,1,0,0,0,905,906,5,98,0,0,906,907,
		5,16,0,0,907,908,3,134,67,0,908,909,5,17,0,0,909,189,1,0,0,0,910,911,5,
		99,0,0,911,912,5,16,0,0,912,913,3,134,67,0,913,914,5,17,0,0,914,191,1,
		0,0,0,915,916,5,100,0,0,916,917,5,16,0,0,917,918,3,134,67,0,918,919,5,
		17,0,0,919,193,1,0,0,0,920,921,5,101,0,0,921,922,5,16,0,0,922,923,3,134,
		67,0,923,924,5,17,0,0,924,195,1,0,0,0,925,926,5,102,0,0,926,927,5,16,0,
		0,927,928,3,134,67,0,928,929,5,17,0,0,929,197,1,0,0,0,930,931,5,103,0,
		0,931,932,5,16,0,0,932,933,3,134,67,0,933,934,5,17,0,0,934,199,1,0,0,0,
		935,936,5,84,0,0,936,937,5,16,0,0,937,938,3,134,67,0,938,939,5,17,0,0,
		939,201,1,0,0,0,60,203,208,213,217,222,226,231,234,237,242,246,251,254,
		259,264,271,276,343,352,357,363,385,393,397,407,412,414,424,432,435,440,
		469,478,486,495,511,522,543,547,552,560,569,578,582,648,655,670,709,712,
		715,724,732,740,747,755,758,762,768,778,786
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JesseFreeman.BasicInterpreter.AntlrGenerated
